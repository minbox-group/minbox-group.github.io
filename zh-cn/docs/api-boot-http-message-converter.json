{
  "filename": "api-boot-http-message-converter.md",
  "__html": "<h1>ApiBoot 整合 阿里系FastJSON完成响应数据格式化</h1>\n<p><code>FastJson</code>是阿里巴巴提供的一款<code>Json</code>格式化插件。</p>\n<p><code>ApiBoot</code>提供了<code>FastJson</code>驱动转换接口请求的<code>Json</code>字符串数据，添加该依赖后会自动格式化时间(格式：YYYY-MM-DD HH:mm:ss)、空对象转换为空字符串返回、空Number转换为0等，还会自动装载<code>ValueFilter</code>接口的实现类来完成自定义的数据格式转换。</p>\n<h2>引入Http Converter</h2>\n<p><code>ApiBoot Http Converter</code>使用非常简单，只需要在<code>pom.xml</code>添加如下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Http Converter--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-http-converter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>如果对<code>ApiBoot</code>使用不了解，可查看<a href=\"/docs/quick-start.html\">快速接入ApiBoot</a></p>\n</blockquote>\n<h2>相关配置</h2>\n<p><code>ApiBoot Http Converter</code>通过使用<code>SpringBoot</code>内置的配置参数名来确定是否开启，在<code>SpringBoot</code>内可以通过<code>spring.http.converters.preferred-json-mapper</code>来修改首选的<code>Json</code>格式化插件，<code>SpringBoot</code>已经提供了三种，分别是：<code>gson</code>、<code>jackson</code>、<code>jsonb</code>，当我们配置该参数为<code>fastJson</code>或<code>不进行配置</code>就会使用<code>ApiBoot Http Converter</code>提供的<code>fastJson</code>来格式化转换<code>Json</code>返回数据。</p>\n<p>如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">spring:</span>\n<span class=\"hljs-attr\">  http:</span>\n<span class=\"hljs-attr\">    converters:</span>\n      <span class=\"hljs-comment\"># 不配置默认使用fastJson</span>\n<span class=\"hljs-attr\">      preferred-json-mapper:</span> <span class=\"hljs-string\">fastJson</span>\n\n</code></pre>\n<h2>内置ValueFilter注解</h2>\n<table>\n<thead>\n<tr>\n<th>注解名称</th>\n<th>ValueFilter实现类</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@ApiBootValueHide</code></td>\n<td><code>ValueHideFilter</code></td>\n<td>用于格式化隐藏标注的字符串字段的值</td>\n</tr>\n<tr>\n<td><code>@ApiBootDecimalAccuracy</code></td>\n<td><code>DecimalAccuracyFilter</code></td>\n<td>用于格式化BigDecimal类型字段的精度、小数点位数等</td>\n</tr>\n</tbody>\n</table>\n<h4>@ApiBootValueHide</h4>\n<p>可配置参数：</p>\n<ul>\n<li><code>length</code>：隐藏的字节长度</li>\n<li><code>start</code>：开始隐藏的字节索引位置</li>\n<li><code>position</code>：位置类型，具体查看<code>ValueHidePositionEnum</code>枚举</li>\n<li><code>placeholder</code>：隐藏后被替换的字符，默认为：<code>*</code></li>\n</ul>\n<h4>@ApiBootDecimalAccuracy</h4>\n<p>可配置参数：</p>\n<ul>\n<li><code>scale</code>：小数点位数，默认为<code>2</code></li>\n<li><code>roundingMode</code>：小数点精度模式，默认为<code>BigDecimal.ROUND_DOWN</code>，具体查看<code>BigDecimal</code>的rounding mode</li>\n</ul>\n<h2>自定义ValueFilter</h2>\n<p><code>ValueFilter</code>是<code>FastJson</code>的概念，用于自定义转换实现，比如：自定义格式化日期、自动截取小数点等。</p>\n<p>下面提供一个<code>ValueFilter</code>的简单示例，具体的使用请参考<code>FastJson</code>官方文档。</p>\n<h3>ValueFilter示例</h3>\n<p>在使用<code>ValueFilter</code>时一般都会搭配一个对应的自定义<code>@Annotation</code>来进行组合使用，保留自定义小数点位数的示例如下所示：</p>\n<p><strong>创建 BigDecimalFormatter Annotation</strong></p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Target</span>({ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER})\n<span class=\"hljs-meta\">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> BigDecimalFormatter {\n    <span class=\"hljs-comment\">/**\n     * 小数位数，默认保留两位\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">scale</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> 2</span>;\n}\n</code></pre>\n<p><strong>创建 BigDecimal ValueFilter</strong></p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BigDecimalValueFilter</span>\n        <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ValueFilter</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * logback\n     */</span>\n    Logger logger = LoggerFactory.getLogger(BigDecimalValueFilter.class);\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@param</span> object 对象\n     * <span class=\"hljs-doctag\">@param</span> name   对象的字段的名称\n     * <span class=\"hljs-doctag\">@param</span> value  对象的字段的值\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(Object object, String name, Object value)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (ValidateTools.isEmpty(value) || !(value <span class=\"hljs-keyword\">instanceof</span> BigDecimal)) {\n            <span class=\"hljs-keyword\">return</span> value;\n        }\n        <span class=\"hljs-keyword\">return</span> convertValue(object, name, value);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 转换值\n     *\n     * <span class=\"hljs-doctag\">@param</span> object 字段所属对象实例\n     * <span class=\"hljs-doctag\">@param</span> name   字段名称\n     * <span class=\"hljs-doctag\">@param</span> value  字段的值\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">Object <span class=\"hljs-title\">convertValue</span><span class=\"hljs-params\">(Object object, String name, Object value)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">/**\n             * 反射获取field\n             */</span>\n            Field field = object.getClass().getDeclaredField(name);\n            <span class=\"hljs-comment\">/**\n             *判断字段是否存在<span class=\"hljs-doctag\">@BigDecimalFormatter</span>注解\n             */</span>\n            <span class=\"hljs-keyword\">if</span> (field.isAnnotationPresent(BigDecimalFormatter.class)) {\n                BigDecimalFormatter bigDecimalFormatter = field.getAnnotation(BigDecimalFormatter.class);\n                <span class=\"hljs-comment\">// 执行格式化</span>\n                BigDecimal decimal = (BigDecimal) value;\n                System.out.println(bigDecimalFormatter.scale());\n                <span class=\"hljs-comment\">// 保留小数位数，删除多余</span>\n                value = decimal.setScale(bigDecimalFormatter.scale(), BigDecimal.ROUND_DOWN).doubleValue();\n            }\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n            logger.error(<span class=\"hljs-string\">\"格式化BigDecimal字段出现异常：{}\"</span>, e.getMessage());\n        }\n        <span class=\"hljs-keyword\">return</span> value;\n    }\n}\n</code></pre>\n<p><strong>使用 BigDecimalFormatter Annotation</strong></p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@BigDecimalFormatter</span>\n<span class=\"hljs-keyword\">private</span> BigDecimal decimalValue;\n</code></pre>\n",
  "link": "/zh-cn/docs/api-boot-http-message-converter.html",
  "meta": {
    "title": "ApiBoot Http Message Converter 使用文档"
  }
}