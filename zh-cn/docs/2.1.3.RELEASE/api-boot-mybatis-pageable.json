{
  "filename": "api-boot-mybatis-pageable.md",
  "__html": "<h1>ApiBoot 整合自动分页框架 Mybatis Pageable</h1>\n<p><code>MyBatis-Pageable</code>是一款自动化分页的插件，基于<code>MyBatis</code>内部的插件<code>Interceptor</code>拦截器编写完成，拦截<code>Executor.query</code>的两个重载方法计算出分页的信息以及根据配置的数据库<code>Dialect</code>自动执行不同的查询语句完成总数量的统计。</p>\n<h2>添加依赖</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Mybatis Pageable--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-mybatis-pageable<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>如果对<code>ApiBoot</code>使用不了解，可查看<a href=\"/docs/quick-start.html\">快速接入ApiBoot</a></p>\n</blockquote>\n<h2>支持的数据库</h2>\n<p><code>MyBatis-Pageable</code>目前支持的主流数据库：</p>\n<ul>\n<li>DB2</li>\n<li>Derby</li>\n<li>DM、</li>\n<li>H2、</li>\n<li>HSQL、</li>\n<li>InforMix、</li>\n<li>Mariadb、</li>\n<li>MySQL、</li>\n<li>Oracle、</li>\n<li>Postgres、</li>\n<li>SqlLite、</li>\n<li>SqlServer2000以上版本</li>\n</ul>\n<h2>怎么使用？</h2>\n<p>目前<code>MyBatis-Pageable</code>使用比较简单，有一个分页请求类<code>PageableRequest</code>来完成自动分页操作，我们来看个简单的示例：</p>\n<pre><code class=\"language-java\">Page&lt;UserEntity&gt; page = PageableRequest.of(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>).request(() -&gt; userMapper.selectAll());\n</code></pre>\n<ul>\n<li><code>of</code>  配置分页的<code>当前页码</code>以及<code>每页的限制条数</code></li>\n<li><code>request</code> 该方法需要传递一个业务逻辑方法，也就是你需要执行分页的方法</li>\n</ul>\n<h3>Page对象详解</h3>\n<p>在上面简单的一行代码就可以完成自动分页以及读取出分页相关的信息，分页执行后我们通过<code>Page</code>对象都可以获取到什么内容呢？</p>\n<ul>\n<li><code>data</code> 分页后的数据列表，具体的返回值可以使用<code>Page&lt;T&gt;</code>泛型接收</li>\n<li><code>totalPages</code> 总页数</li>\n<li><code>totalElements</code> 总条数</li>\n<li><code>pageIndex</code> 当前页码</li>\n<li><code>pageSize</code> 每页限制条数</li>\n<li><code>offset</code> 分页开始位置</li>\n<li><code>endRow</code> 分页结束位置</li>\n<li><code>hasNext</code> 是否存在下一页，<code>true</code>：存在，<code>false</code>：不存在</li>\n<li><code>hasPrevious</code> 是否存在上一页，<code>true</code>：存在，<code>false</code>：不存在</li>\n<li><code>isFirst</code> 是否为首页，<code>true</code>：首页，<code>false</code>：非首页</li>\n<li><code>isLast</code> 是否为末页，<code>true</code>：末页，<code>false</code>：非末页</li>\n</ul>\n<h3>翻页查询</h3>\n<p>实际开发过程中存在这种情况，虽然传递的分页页码为<code>1</code>，但是种种判断过后我需要查询<code>上一页</code>或者<code>下一页</code>、<code>首页</code>的数据，这时候你就可以<code>PageableRequest</code>对象的<code>next()</code>、<code>previous()</code>、<code>first()</code>方法来处理这种事情的发生，如下示例：</p>\n<pre><code>Pageable pageable = PageableRequest.of(2, 10);\n        if (xx = xx) {\n            pageable.next();\n        }\n        Page&lt;UserEntity&gt; page = pageable.request(()-&gt;userMapper.selectAll());\n</code></pre>\n<p>上面是<code>翻页到下一页</code>的查询示例，当然这个功能是为了尽可能的方便分页的使用，同样的<code>previous()</code>、<code>first()</code>方法都可以这么使用。</p>\n<h2>注解使用</h2>\n<p><code>Mybatis Pageable</code>内置了两个分页相关的注解：</p>\n<ul>\n<li><code>PageSize</code>：如果实体类内的字段添加了该注解，会自动作为分页每页限制数量作为查询条件</li>\n<li><code>PageIndex</code>：如果实体类内的字段添加了该注解，会自动作为分页当前页码作为查询条件</li>\n</ul>\n<p>使用示例：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// 构建查询参数类</span>\n  QueryUserPageParam pageParam = <span class=\"hljs-keyword\">new</span> QueryUserPageParam();\n  pageParam.setPageSize(<span class=\"hljs-number\">10</span>);\n  pageParam.setPageIndex(<span class=\"hljs-number\">1</span>);\n  pageParam.setKeyWord(<span class=\"hljs-string\">\"少年\"</span>);\n\n  PageableRequest.of(pageParam).request(() -&gt; {\n    <span class=\"hljs-comment\">// 模糊查询用户列表(无需添加分页限制)</span>\n  });\n}\n\n<span class=\"hljs-comment\">/**\n  * 示例：用户分页查询\n  * 根据关键字条件\n  */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryUserPageParam</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PageParam</span> </span>{\n  <span class=\"hljs-keyword\">private</span> String keyWord;\n}\n\n<span class=\"hljs-comment\">/**\n  * 示例：<span class=\"hljs-doctag\">@PageIndex</span>、<span class=\"hljs-doctag\">@PageSize</span>注解使用\n  */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PageParam</span> </span>{\n  <span class=\"hljs-meta\">@PageIndex</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> pageIndex;\n  <span class=\"hljs-meta\">@PageSize</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> pageSize;\n}\n</code></pre>\n",
  "link": "/zh-cn/docs/2.1.3.RELEASE/api-boot-mybatis-pageable.html",
  "meta": {
    "title": "ApiBoot Mybatis Pageable 使用文档"
  }
}