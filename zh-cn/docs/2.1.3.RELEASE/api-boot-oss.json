{
  "filename": "api-boot-oss.md",
  "__html": "<h1>ApiBoot 整合 阿里云对象存储OSS</h1>\n<p><code>ApiBoot</code>添加快速集成<code>Aliyun</code>的对象存储服务<code>Oss</code>，提供常用的文件操作方法，当然也提供自定义扩展，以致于满足绝大数业务场景，并且通过扩展可以实现上传文件进度条、下载文件进度条、存储空间操作、静态网站托管、访问日志、防盗链、分片上传、追加上传、断点续传等等。</p>\n<h2>引入ApiBoot Alibaba Oss</h2>\n<p>在<code>pom.xml</code>配置文件内添加依赖，如下所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Alibaba Oss--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-alibaba-oss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<h2>配置参数列表</h2>\n<table>\n<thead>\n<tr>\n<th>配置参数</th>\n<th>参数介绍</th>\n<th>默认值</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>api.boot.oss.region</code></td>\n<td>oss所属地域</td>\n<td>空</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>api.boot.oss.bucket-name</code></td>\n<td>oss存储空间名称</td>\n<td>空</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>api.boot.oss.access-key-id</code></td>\n<td>阿里云账户accessKeyId</td>\n<td>空</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>api.boot.oss.access-key-secret</code></td>\n<td>阿里云账户accessKeySecret</td>\n<td>空</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>api.boot.oss.domain</code></td>\n<td>oss存储空间所绑定的自定义域名，如果不配置，上传文件成功后返回默认格式化的文件访问路径</td>\n<td>空</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<h2>上传文件</h2>\n<p>在使用<code>ApiBoot Oss</code>时，只需要注入<code>ApiBootOssService</code>类就可以完成默认方法的使用，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> ApiBootOssService apiBootOssService;\n</code></pre>\n<h3>流上传</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * 流方式上传\n  */</span>\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">uploadBytes</span><span class=\"hljs-params\">()</span> </span>{\n  ApiBootObjectStorageResponse response = apiBootOssService.upload(<span class=\"hljs-string\">\"admin.txt\"</span>, <span class=\"hljs-string\">\"admin\"</span>.getBytes());\n  logger.info(<span class=\"hljs-string\">\"文件名称：{}\"</span>, response.getObjectName());\n  logger.info(<span class=\"hljs-string\">\"文件访问路径：{}\"</span>, response.getObjectUrl());\n}\n</code></pre>\n<h3>本地文件上传</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n* 本地文件上传\n*/</span>\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">uploadFile</span><span class=\"hljs-params\">()</span> </span>{\n\tApiBootObjectStorageResponse response = apiBootOssService.upload(<span class=\"hljs-string\">\"logo.png\"</span>, <span class=\"hljs-string\">\"/Users/yuqiyu/Downloads/logo.png\"</span>);\n\tlogger.info(<span class=\"hljs-string\">\"文件名称：{}\"</span>, response.getObjectName());\n\tlogger.info(<span class=\"hljs-string\">\"文件访问路径：{}\"</span>, response.getObjectUrl());\n}\n</code></pre>\n<h3>文件流上传</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n* 文件流方式上传\n*\n* <span class=\"hljs-doctag\">@throws</span> Exception\n*/</span>\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">uploadInputStream</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n\tFileInputStream inputStream = <span class=\"hljs-keyword\">new</span> FileInputStream(<span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">\"/Users/yuqiyu/Downloads/logo.png\"</span>));\n\tApiBootObjectStorageResponse response = apiBootOssService.upload(<span class=\"hljs-string\">\"测试.png\"</span>, inputStream);\n\tlogger.info(<span class=\"hljs-string\">\"文件名称：{}\"</span>, response.getObjectName());\n\tlogger.info(<span class=\"hljs-string\">\"文件访问路径：{}\"</span>, response.getObjectUrl());\n}\n</code></pre>\n<blockquote>\n<p>通过文件的输入流完成对象存储文件的上传</p>\n</blockquote>\n<h3>下载文件</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * 下载文件\n  */</span>\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">download</span><span class=\"hljs-params\">()</span> </span>{\n  apiBootOssOverrideService.download(<span class=\"hljs-string\">\"测试.png\"</span>, <span class=\"hljs-string\">\"/Users/yuqiyu/Downloads/测试.png\"</span>);\n}\n</code></pre>\n<blockquote>\n<p>在上面的示例中，文件会自动下载到<code>/Users/yuqiyu/Downloads/</code>目录下，文件名称为<code>测试.png</code>。</p>\n</blockquote>\n<h3>删除文件</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n* 删除文件示例\n*/</span>\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">()</span> </span>{\n\tapiBootOssOverrideService.delete(<span class=\"hljs-string\">\"测试.png\"</span>);\n}\n</code></pre>\n<blockquote>\n<p>删除对象存储空间内的文件时只需要传递文件名即可。</p>\n</blockquote>\n<h3>MultipartFile 上传文件</h3>\n<p>如果你是通过<code>SpringMvc</code>提供的<code>MultipartFile</code>对象进行上传文件，可以通过如下示例进行上传：</p>\n<pre><code class=\"language-java\">MultipartFile multipartFile = ..;\n<span class=\"hljs-comment\">// 流方式上传</span>\nApiBootObjectStorageResponse responseByte = apiBootOssService.upload(<span class=\"hljs-string\">\"测试.png\"</span>, multipartFile.getBytes());\n<span class=\"hljs-comment\">// 文件输入流方式上传</span>\nApiBootObjectStorageResponse responseIs = apiBootOssService.upload(<span class=\"hljs-string\">\"测试.png\"</span>, multipartFile.getInputStream());\n</code></pre>\n<h2>分片上传</h2>\n<p><code>ApiBoot</code>集成了分片上传，只需要一个方法就可以把大文件进行分片上传，<code>ApiBoot</code>会自动根据<code>partSize</code>进行整理分片数量，如下所示：</p>\n<pre><code class=\"language-java\">ApiBootObjectStorageResponse response = apiBootOssService\n                .multipartUpload(\n  <span class=\"hljs-string\">\"初识ApiBoot.mp4\"</span>,\n  <span class=\"hljs-comment\">//路径方式：\"/Users/yuqiyu/Downloads/fa2a664e-f827-cfab-7323-3583b3ffd00c.mp4\",</span>\n  <span class=\"hljs-comment\">// 文件对象方式</span>\n  <span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">\"/Users/yuqiyu/Downloads/fa2a664e-f827-cfab-7323-3583b3ffd00c.mp4\"</span>),\n  PartSize.MB);\nSystem.out.println(<span class=\"hljs-string\">\"文件名称：\"</span> + response.getObjectName());\nSystem.out.println(<span class=\"hljs-string\">\"文件路径：\"</span> + response.getObjectUrl());\n</code></pre>\n<p>方法参数描述：</p>\n<ol>\n<li>文件名称</li>\n<li>本地文件路径</li>\n<li>每一个<code>part</code>的大小，可以直接使用<code>ApiBoot</code>提供的<code>PartSize</code>接口常量来进行计算。</li>\n</ol>\n<h2>自定义扩展</h2>\n<p><code>ApiBoot Alibaba Oss</code>提供的方法毕竟是有限的，因此<code>ApiBoot</code>提供了自定义的扩展方式，让使用者可以根据<code>Oss</code>官方文档进行扩展，包含上传文件进度条、下载文件进度条、存储空间操作、静态网站托管、访问日志、防盗链、分片上传、追加上传、断点续传等等。</p>\n<p>自定义扩展首先需要创建类并继承<code>ApiBootOssService</code>，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ApiBootOssOverrideService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ApiBootOssService</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * logger instance\n     */</span>\n    <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(ApiBootOssOverrideService.class);\n\n    <span class=\"hljs-comment\">/**\n     * 实现父类构造函数\n     *\n     * <span class=\"hljs-doctag\">@param</span> endpoint        外网节点\n     * <span class=\"hljs-doctag\">@param</span> bucketName      存储空间名称\n     * <span class=\"hljs-doctag\">@param</span> accessKeyId     阿里云账号授权Id\n     * <span class=\"hljs-doctag\">@param</span> accessKeySecret 阿里云账号授权Secret\n     * <span class=\"hljs-doctag\">@param</span> domain          自定义域名\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ApiBootOssOverrideService</span><span class=\"hljs-params\">(String endpoint, String bucketName, String accessKeyId, String accessKeySecret, String domain)</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(endpoint, bucketName, accessKeyId, accessKeySecret, domain);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 创建bucket存储\n     *\n     * <span class=\"hljs-doctag\">@param</span> bucketName 存储名称\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">createBucket</span><span class=\"hljs-params\">(String bucketName)</span> </span>{\n        OSSClient ossClient = getOssClient();\n        Bucket bucket = ossClient.createBucket(bucketName);\n        logger.info(<span class=\"hljs-string\">\"新创建存储空间名称：{}\"</span>, bucket.getName());\n        logger.info(<span class=\"hljs-string\">\"新创建存储空间所属人：{}\"</span>, bucket.getOwner().getDisplayName());\n        closeOssClient(ossClient);\n    }\n}\n</code></pre>\n<p>如上<code>createBucket</code>方法所示<code>ApiBootOssService</code>内部提供了获取<code>OssClient</code>以及关闭<code>OssClient</code>连接的方法，可以直接调用。</p>\n<p><strong>扩展生效</strong></p>\n<p>我们自定义的扩展，需要将实例放入<code>SpringIOC</code>容器内，方便我们在使用处进行注入，要注意，由于构造函数参数的原因，无法直接通过<code>@Service</code>或者<code>@Component</code>注解进行标注，需要通过如下方式：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-meta\">@Bean</span>\n<span class=\"hljs-meta\">@ConditionalOnMissingBean</span>\n<span class=\"hljs-function\">ApiBootOssOverrideService <span class=\"hljs-title\">apiBootOssOverrideService</span><span class=\"hljs-params\">(ApiBootOssProperties apiBootOssProperties)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ApiBootOssOverrideService(apiBootOssProperties.getRegion().getEndpoint(), apiBootOssProperties.getBucketName(), apiBootOssProperties.getAccessKeyId(), apiBootOssProperties.getAccessKeySecret(), apiBootOssProperties.getDomain());\n}\n</code></pre>\n<p><code>ApiBootOssProperties</code>属性配置类，是<code>ApiBoot</code>内置的，可以在任意地方进行注入，这里目的只是为了拿到相关配置进行构造参数实例化使用。</p>\n",
  "link": "/zh-cn/docs/2.1.3.RELEASE/api-boot-oss.html",
  "meta": {
    "title": "ApiBoot Oss 使用文档"
  }
}