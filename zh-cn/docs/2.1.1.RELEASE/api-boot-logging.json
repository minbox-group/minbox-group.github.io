{
  "filename": "api-boot-logging.md",
  "__html": "<h1>ApiBoot 零侵入、链路式请求日志分析框架</h1>\n<p><code>ApiBoot</code>提供单应用、微服务应用下的请求日志分析框架<code>ApiBoot Logging</code>，特性列表如下所示：</p>\n<ul>\n<li><code>链路</code>：为每一个请求生成一个链路的单条或者多条请求日志信息，精准定位程序出现问题的位置。</li>\n<li><code>耗时</code>：可以分析出每一个请求的耗时，改善服务的性能瓶颈</li>\n<li><code>异常信息</code>：请求遇到异常，提供请求日志的异常堆栈信息记录</li>\n<li><code>请求参数</code>：可以获取<code>RequestBody</code>、<code>PathParam</code>两种方式的参数</li>\n<li><code>响应内容</code>：可以获取本次请求响应的内容信息。</li>\n<li><code>服务信息</code>：可获取提供服务的ID、IP、Port等信息。</li>\n<li><code>异步通知</code>：请求日志数据采集后通过<code>Event/Listener</code>方式异步通知给<code>RPC</code>、<code>MQ</code>、<code>REST</code>、<code>Local</code>。</li>\n<li><code>数据分析</code>：阈值警告、异常通知等（短信、邮件等方式，2.1.1.RELEASE版本未实现.）</li>\n</ul>\n<blockquote>\n<p><code>ApiBoot Logging</code>内部采用<code>拦截器</code>、<code>Filter</code>组合完成一系列的操作。</p>\n<ol>\n<li>如果一个请求的<code>header</code>信息内包含<code>traceId（链路ID）</code>则加入该链路，如果不存在则生成新的链路信息</li>\n<li>如果一个请求的<code>header</code>信息内包含<code>spanId（跨度ID）</code>，则使用该<code>spanId</code>作为<code>parent spanId</code>，对两个请求进行上下级关联。</li>\n</ol>\n</blockquote>\n<h2>架构设计图</h2>\n<p><img src=\"/img/apiboot-logging.png\" alt=\"ApiBoot Logging架构设计图\"></p>\n<h2>1. 添加依赖组件</h2>\n<p>在<code>pom.xml</code>配置文件内添加依赖，如下所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Logging--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-logging<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<h2>2. 修改日志等级</h2>\n<p>如果想让<code>ApiBoot Logging</code>在控制台输出日志信息，需要修改<code>application.yml</code>配置文件内的日志等级，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">logging:</span>\n  <span class=\"hljs-attr\">level:</span>\n    <span class=\"hljs-attr\">org.minbox.framework.api.boot.plugin.logging:</span> <span class=\"hljs-string\">debug</span>\n</code></pre>\n<h2>3. 日志通知</h2>\n<p><code>ApiBoot Logging</code>提供了日志的通知功能，利用该功能可以对每一条请求日志进行输出、存储、分析等，通过实现<code>ApiBootLogNotice</code>接口使用通知功能，示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LocalNoticeSample</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ApiBootLogNotice</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * order 值越小执行越靠前\n     *\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 请求日志通知执行方法\n     * ApiBootLog为一次请求日志对象基本信息\n     *\n     * <span class=\"hljs-doctag\">@param</span> apiBootLog ApiBoot Log\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">notice</span><span class=\"hljs-params\">(ApiBootLog apiBootLog)</span> </span>{\n        System.out.println(apiBootLog);\n    }\n}\n</code></pre>\n<p><code>ApiBoot Logging</code>提供的<code>ApiBootLogNotice</code>支持<strong>多个实现类配置</strong>，执行顺序根据<code>getOrder()</code>方法的返回值来定义，<code>getOrder()</code>方法返回<strong>值越小越靠前执行</strong>。\n<code>ApiBootLog</code>对象定义如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ApiBootLog</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * trace id\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String traceId;\n    <span class=\"hljs-comment\">/**\n     * span id\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String spanId;\n    <span class=\"hljs-comment\">/**\n     * parent span id\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String parentSpanId;\n    <span class=\"hljs-comment\">/**\n     * request uri\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String requestUri;\n    <span class=\"hljs-comment\">/**\n     * request method\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String requestMethod;\n    <span class=\"hljs-comment\">/**\n     * http status code\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> httpStatus;\n    <span class=\"hljs-comment\">/**\n     * request ip\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String requestIp;\n    <span class=\"hljs-comment\">/**\n     * service ip address\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String serviceIp;\n    <span class=\"hljs-comment\">/**\n     * service port\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String servicePort;\n    <span class=\"hljs-comment\">/**\n     * start time\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Long startTime;\n    <span class=\"hljs-comment\">/**\n     * end time\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Long endTime;\n    <span class=\"hljs-comment\">/**\n     * this request time consuming\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> timeConsuming;\n    <span class=\"hljs-comment\">/**\n     * service id\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String serviceId;\n    <span class=\"hljs-comment\">/**\n     * request headers\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; requestHeaders;\n    <span class=\"hljs-comment\">/**\n     * request param\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String requestParam;\n    <span class=\"hljs-comment\">/**\n     * request body\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String requestBody;\n    <span class=\"hljs-comment\">/**\n     * response headers\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; responseHeaders;\n    <span class=\"hljs-comment\">/**\n     * response body\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String responseBody;\n    <span class=\"hljs-comment\">/**\n     * exception stack\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String exceptionStack;\n}\n</code></pre>\n<h2>4. 无缝支持Openfeign</h2>\n<p><code>ApiBoot Logging</code>支持<code>Spring Cloud Openfeign</code>的方式请求，在<code>SpringCloud</code>微服务应用中如果你发起一个<code>Http</code>请求，而该请求在服务端通过<code>openfeign</code>访问其他服务，这时<code>ApiBoot Logging</code>会通过<code>openfeign</code>的<code>Interceptor</code>携带<code>TraceId</code>、<code>SpanId</code>到下一个服务，完成请求日志的链路信息透传。</p>\n",
  "link": "/zh-cn/docs/2.1.1.RELEASE/api-boot-logging.html",
  "meta": {
    "title": "ApiBoot Logging 使用文档"
  }
}