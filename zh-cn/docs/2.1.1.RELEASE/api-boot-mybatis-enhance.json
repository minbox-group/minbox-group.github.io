{
  "filename": "api-boot-mybatis-enhance.md",
  "__html": "<h1>ApiBoot 整合 持久化框架 Mybatis Enhance</h1>\n<p><code>ApiBoot Mybatis Enhance</code>是一款<code>数据持久化</code>、<code>动态查询结构化</code>框架，用户操作单表、多表关联的数据，在<code>Mybatis</code>的基础上进行封装扩展，\n不影响任何原生的使用，使用后完全替代<code>mybatis-core</code>、<code>mybatis-spring</code>以及<code>mybatis-spring-boot-starter</code>，使用<code>SpringBoot配置文件</code>方式代替传统代码配置，减少繁琐代码编写。</p>\n<h2>1. 特性</h2>\n<p><code>ApiBoot Mybatis Enhance</code>总结了目前主流框架的使用风格，对开发者来说使用不便的地方进行封装扩展，让数据操作更艺术。</p>\n<h3>特性一、提供增强方法</h3>\n<p><code>ApiBoot Mybatis Enhance</code>内部提供了常用的方法实现，可以快速对单条、多条数据进行<code>CRUD</code>常规操作。</p>\n<h3>特性二、DSL</h3>\n<p><code>ApiBoot Mybatis Enhance</code>提供动态查询方式，可以动态查询单表、多表关联指定的列值或者整条数据，可以将结果映射成你想要的类型。</p>\n<h3>特性三、方法规则查询</h3>\n<p><code>ApiBoot Mybatis Enhance</code>提供方法规则查询，在对应数据接口<code>Mapper</code>内，遵循一定规则可以完成对数据的查询、统计、删除等。</p>\n<h2>2. 愿景</h2>\n<p><code>ApiBoot Mybatis Enhance</code>致力于解决简单、快速操作数据问题，省去繁琐<code>SQL</code>的编写，让开发人员更专注业务编写。</p>\n<h2>3. 开始使用</h2>\n<p>在项目的<code>pom.xml</code>文件内添加如下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Mybatis Enhance--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-mybatis-enhance<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<h2>4. 定义数据实体</h2>\n<p><code>Enhance</code>所需要的数据实体很简单，只需要告知<code>Enhance</code>所需要的表信息以及列信息即可（实际在开发过程中编写数据实体是一件很繁琐的事情，因此<code>ApiBoot</code>为<code>Enhance</code>编写了专属的代码生成插件，访问<a href=\"/zh-cn/docs/api-boot-mybatis-enhance-codegen.html\">Enhance Codegen</a>查看具体使用方式）\n利用<code>Enhance Codegen</code>自动生成的数据实体类如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> com.gitee.hengboy.mybatis.enhance.common.annotation.Column;\n<span class=\"hljs-keyword\">import</span> com.gitee.hengboy.mybatis.enhance.common.annotation.Id;\n<span class=\"hljs-keyword\">import</span> com.gitee.hengboy.mybatis.enhance.common.annotation.Table;\n<span class=\"hljs-keyword\">import</span> com.gitee.hengboy.mybatis.enhance.common.enums.KeyGeneratorTypeEnum;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n\n<span class=\"hljs-keyword\">import</span> java.sql.Timestamp;\n\n<span class=\"hljs-comment\">/**\n * 用户基本信息\n * <span class=\"hljs-doctag\">@author</span> ApiBoot Mybatis Enhance Codegen\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@Table</span>(name = <span class=\"hljs-string\">\"iot_user_info\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserInfo</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * 用户主键\n     */</span>\n    <span class=\"hljs-meta\">@Id</span>(generatorType = KeyGeneratorTypeEnum.UUID)\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_ID\"</span>)\n    <span class=\"hljs-keyword\">private</span> String id;\n    <span class=\"hljs-comment\">/**\n     * 用户编号\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_USER_NO\"</span>)\n    <span class=\"hljs-keyword\">private</span> String userNo;\n    <span class=\"hljs-comment\">/**\n     * 用户名\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_USER_NAME\"</span>)\n    <span class=\"hljs-keyword\">private</span> String userName;\n    <span class=\"hljs-comment\">/**\n     * 年龄\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_AGE\"</span>)\n    <span class=\"hljs-keyword\">private</span> Integer age;\n    <span class=\"hljs-comment\">/**\n     * 性别，boy：男,girl：女,other：其他\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_SEX\"</span>)\n    <span class=\"hljs-keyword\">private</span> String sex = <span class=\"hljs-string\">\"other\"</span>;\n    <span class=\"hljs-comment\">/**\n     * 创建时间\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_CREATE_TIME\"</span>,insertable = <span class=\"hljs-keyword\">false</span>)\n    <span class=\"hljs-keyword\">private</span> Timestamp createTime;\n    <span class=\"hljs-comment\">/**\n     * 1：正常，0：禁用，-1：删除\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_STATUS\"</span>)\n    <span class=\"hljs-keyword\">private</span> Integer status = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-comment\">/**\n     * 备注信息\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_MARK\"</span>)\n    <span class=\"hljs-keyword\">private</span> String mark;\n}\n</code></pre>\n<p>在上面的数据实体类内我们都是使用的注解形式来完成的配置，简单介绍下注解的作用</p>\n<ul>\n<li><code>@Data</code>：<code>Lombok</code>内部的注解，如果没有了解过该插件可以访问恒宇少年的文章<a href=\"https://blog.yuqiyu.com/spring-boot-chapter29.html\" target=\"_blank\">第二十九章：基于SpringBoot平台使用Lombok来优雅的编码</a>查看具体使用方法。</li>\n<li><code>@Table</code>：<code>Enhance</code>内部注解，用于标注该数据实体所使用的<code>表信息</code></li>\n<li><code>@Id</code>：<code>Enhance</code>内部注解，用户标注主键字段</li>\n<li><code>@Column</code>：<code>Enhance</code>内部注解，用于标注字段对应的<code>列信息</code></li>\n</ul>\n<h2>5. 了解EnhanceMapper接口</h2>\n<p><code>Enhance</code>所管理的<code>Mybatis Mapper</code>以及内置的<code>CRUD</code>操作单表数据的接口方法都是由<code>EnhanceMapper</code>接口来完成的。</p>\n<p><code>ApiBoot Mybatis Enhance</code>在项目启动时会自动加载<code>EnhanceMapper</code>的所有子类进行数据操作方法实现并交付给<code>Spring IOC</code>进行托管，为每一个方法\n都提供对应的<code>Statement</code>以及<code>SqlSource</code>的实现，而<code>StatementID</code>则是<code>Mapper</code>类的全限定名。</p>\n<h3>5.1 EnhanceMapper提供的方法列表</h3>\n<p>在<code>EnhanceMapper</code>接口内提供的数据操作方法，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 统计数据</span>\n<span class=\"hljs-function\">Long <span class=\"hljs-title\">countAll</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 清空数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteAll</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键数组删除指定数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteArray</span><span class=\"hljs-params\">(Id... ids)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据自定义sql删除数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteBySql</span><span class=\"hljs-params\">(String sql, Map&lt;String, Object&gt; params)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键集合删除指定数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteCollection</span><span class=\"hljs-params\">(Collection&lt;Id&gt; collection)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 删除一条数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteOne</span><span class=\"hljs-params\">(Id id)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 数据保存</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(T t)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 保存数组内的所有数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertArray</span><span class=\"hljs-params\">(T... array)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 保存集合内的所有数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertCollection</span><span class=\"hljs-params\">(Collection&lt;T&gt; collection)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 查询全部数据</span>\n<span class=\"hljs-function\">List&lt;T&gt; <span class=\"hljs-title\">selectAll</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键数组查询指定数据</span>\n<span class=\"hljs-function\">List&lt;T&gt; <span class=\"hljs-title\">selectArray</span><span class=\"hljs-params\">(Id... ids)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 分页查询数据</span>\n<span class=\"hljs-function\">List&lt;T&gt; <span class=\"hljs-title\">selectByPageable</span><span class=\"hljs-params\">(Pageable pageable)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 自定义sql查询数据</span>\n<span class=\"hljs-function\">List&lt;Map&gt; <span class=\"hljs-title\">selectBySql</span><span class=\"hljs-params\">(String sql, Map&lt;String, Object&gt; params)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键集合查询指定数据</span>\n<span class=\"hljs-function\">List&lt;T&gt; <span class=\"hljs-title\">selectCollection</span><span class=\"hljs-params\">(Collection&lt;Id&gt; ids)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键查询单条数据</span>\n<span class=\"hljs-function\">T <span class=\"hljs-title\">selectOne</span><span class=\"hljs-params\">(Id id)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键更新数据实体</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(T t)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 自定义sql更新数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateBySql</span><span class=\"hljs-params\">(String sql, Map&lt;String, Object&gt; params)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n</code></pre>\n<h3>5.2 使用EnhanceMapper</h3>\n<p>针对上面的<code>UserInfo</code>数据实体，对应的<code>Mapper</code>接口定义如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * 用户数据接口\n *\n * <span class=\"hljs-doctag\">@author</span>：恒宇少年 - 于起宇\n * &lt;p&gt;\n * DateTime：2019-05-23 17:02\n * Blog：https://blog.yuqiyu.com\n * WebSite：http://www.jianshu.com/u/092df3f77bca\n * Gitee：https://gitee.com/hengboy\n * GitHub：https://github.com/hengboy\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">EnhanceMapper</span>&lt;<span class=\"hljs-title\">UserInfo</span>, <span class=\"hljs-title\">String</span>&gt; </span>{\n}\n</code></pre>\n<p>在上面<code>UserMapper</code>拥有了<code>EnhanceMapper</code>的全部接口方法并且每一个方法都已经实现了对应的<code>Statement</code>，而且<code>UserMapper</code>已经被<code>Spring IOC</code>托管，我们在实体类内可以直接通过<code>注入</code>方法来调用使用。</p>\n<h2>6. 保存数据</h2>\n<p><code>EnhanceMapper</code>所提供的<code>insert</code>方法参数为数据对象实例，添加一条数据如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-meta\">@Transactional</span>(rollbackFor = Exception.class)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserService</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * 用户基本信息数据接口\n     */</span>\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;\n\n    <span class=\"hljs-comment\">/**\n     * 保存用户信息\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">saveUser</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// 创建用户基本信息对象</span>\n        UserInfo userInfo = <span class=\"hljs-keyword\">new</span> UserInfo();\n        <span class=\"hljs-comment\">// 设置用户编号</span>\n        userInfo.setUserNo(<span class=\"hljs-string\">\"2019xxxx\"</span>);\n        <span class=\"hljs-comment\">// 设置用户年龄</span>\n        userInfo.setAge(<span class=\"hljs-number\">24</span>);\n        <span class=\"hljs-comment\">// 执行数据保存</span>\n        userMapper.insert(userInfo);\n    }\n}\n</code></pre>\n<p>通过上面<code>saveUser</code>就可以执行保存一条用户基本信息，在上面保存数据方法中并未设置主键的值，下面详细介绍<code>Enhance</code>内提供的几种主键生成策略。</p>\n<h3>6.1 自增主键</h3>\n<p><code>Enhance</code>支持自增类型的主键，可以将本次添加数据的自增主键值查询并设置到保存对象配置<code>@Id</code>注解的字段内，配置使用如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n* 用户主键\n*/</span>\n<span class=\"hljs-meta\">@Id</span>(generatorType = KeyGeneratorTypeEnum.AUTO)\n<span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_ID\"</span>)\n<span class=\"hljs-keyword\">private</span> Integer userId;\n</code></pre>\n<h3>6.2 UUID主键</h3>\n<p>如果主键使用<code>UUID</code>方式进行存储，<code>Enhance</code>同样是支持配置，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n* 用户主键\n*/</span>\n<span class=\"hljs-meta\">@Id</span>(generatorType = KeyGeneratorTypeEnum.UUID)\n<span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_ID\"</span>)\n<span class=\"hljs-keyword\">private</span> String id;\n</code></pre>\n<blockquote>\n<p>注意：数据库设置主键字段长度时，<code>UUID</code>生成的长度为<code>36</code>位，包含<code>-</code>。</p>\n</blockquote>\n<h3>6.3 自定义主键</h3>\n<p>除了自增、UUID方式的主键以外，还支持<code>自定义主键</code>的方式，比如用户编号：<code>2019xxxxx</code>，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n* 用户主键\n*/</span>\n<span class=\"hljs-meta\">@Id</span>(generatorType = KeyGeneratorTypeEnum.DIY)\n<span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"UI_ID\"</span>)\n<span class=\"hljs-keyword\">private</span> String id;\n</code></pre>\n<h2>7. 查询数据</h2>\n<p><code>EnhanceMapper</code>提供了多种查询方法，其中包含<code>主键查询</code>、<code>根据主键的集合查询</code>、<code>分页查询</code>等，下面详细介绍具体的使用方法。</p>\n<h3>7.1 根据主键查询单条记录</h3>\n<p><code>Enhance</code>支持三种根据主键查询的方法，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 查询单条记录</span>\nUserInfo user = mapper.selectOne(<span class=\"hljs-string\">\"test\"</span>);\n<span class=\"hljs-comment\">// 根据主键数组查询多条记录</span>\nList&lt;UserInfo&gt; userArray = mapper.selectArray(<span class=\"hljs-string\">\"test\"</span>, <span class=\"hljs-string\">\"admin\"</span>);\n<span class=\"hljs-comment\">// 根据主键集合查询多条记录</span>\nList&lt;UserInfo&gt; userCollection = mapper.selectCollection(Arrays.asList(<span class=\"hljs-string\">\"test\"</span>, <span class=\"hljs-string\">\"admin\"</span>));\n</code></pre>\n<p>其中<code>selectArray</code>、<code>selectCollection</code>两个方法是根据传递的多个主键进行查询出对应多条记录。</p>\n<h3>7.2 查询记录列表</h3>\n<p><code>Enhance</code>支持查询表内的全部数据、分页查询数据，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 查询全部数据</span>\nList&lt;UserInfo&gt; users = mapper.selectAll();\n<span class=\"hljs-comment\">// 分页查询数据</span>\nList&lt;UserInfo&gt; pageUsers = mapper.selectByPageable(Pageable.builder().limit(<span class=\"hljs-number\">10</span>).currentPage(<span class=\"hljs-number\">2</span>).build());\n</code></pre>\n<p><code>EnhanceMapper</code>接口提供的<code>查询记录列表</code>的方法，有一定的局限性，目前并不支持添加查询条件进行筛选数据，不过<code>ApiBoot Enhance</code>提供了<code>DSL</code>方式进行查询数据，具体使用方法请参考本章节下面的文档内容。</p>\n<h2>8. 更新数据</h2>\n<p><code>EnhanceMapper</code>提供更新单个对象的方法，具体使用方法如下所示：</p>\n<pre><code class=\"language-java\">UserInfo userInfo = <span class=\"hljs-keyword\">new</span> UserInfo();\nuserInfo.setId(<span class=\"hljs-string\">\"test\"</span>);\nuserInfo.setAge(<span class=\"hljs-number\">20</span>);\nuserInfo.setUserName(<span class=\"hljs-string\">\"测试用户\"</span>);\nmapper.update(userInfo);\n</code></pre>\n<p><strong>更新数据时，不设置值得字段会自动将表内数据更新为null，如果你只想更新某一个字段，可以使用如下两种形式。</strong></p>\n<ul>\n<li><code>查询后更新</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 根据主键查询记录</span>\nUserInfo userInfo = mapper.selectOne(<span class=\"hljs-string\">\"test\"</span>);\n<span class=\"hljs-comment\">// 更新查询出记录的年龄</span>\nuserInfo.setAge(<span class=\"hljs-number\">24</span>);\n<span class=\"hljs-comment\">// 更新查询出记录的名称</span>\nuserInfo.setUserName(<span class=\"hljs-string\">\"测试用户\"</span>);\n<span class=\"hljs-comment\">// 执行更新记录</span>\nmapper.update(userInfo);\n</code></pre>\n<blockquote>\n<p><code>update</code>方法调用时，参数对象的主键必须设置值，更新时自动根据主键进行设置。</p>\n</blockquote>\n<ul>\n<li><code>动态更新</code></li>\n</ul>\n<p>详见本章动态更新文档，支持根据<code>主键</code>、<code>自定义条件</code>进行筛选定位更新的记录。</p>\n<h2>9. 删除数据</h2>\n<p><code>EnhanceMapper</code>提供的删除方法都是<code>物理删除</code>，会从表内直接将匹配数据删除，<code>EnhanceMapper</code>提供的删除方法如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 根据主键删除单条数据记录</span>\nmapper.deleteOne(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-comment\">// 根据主键数组删除多条对应数据记录</span>\nmapper.deleteArray(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n<span class=\"hljs-comment\">// 根据主键集合删除多条对应数据记录</span>\nmapper.deleteCollection(Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>));\n<span class=\"hljs-comment\">// 删除全部记录</span>\nmapper.deleteAll();\n</code></pre>\n<p>如果你的业务需求是<code>业务逻辑删除</code>，只更新某一个状态字段的值时，可以考虑使用<code>动态更新</code>，详见下面文档。</p>\n<h2>10. 动态查询</h2>\n<p><code>ApiBoot Enhance</code>的动态查询可以做很多事情，我们可以对<code>单表数据</code>、<code>多表数据</code>进行查询操作，可以使用某一个<code>数据对象</code>作为查询的返回值映射，也可以<code>自定义DTO</code>、<code>基本数据类型</code>来作为查询方法的返回值，每一个查询的查询条件\n都可以做到完全自定义，实现一行代码完成对数据的查询。</p>\n<h3>10.1 生成动态查询实体</h3>\n<p>在通过<code>ApiBoot Enhance</code>动态操作数据之前需要对应每一张表创建一个<code>动态实体</code>，<code>ApiBoot</code>提供了对应每一张表自动生成<code>数据实体</code>、<code>动态实体</code>的<code>maven plugin</code>，访问<a href=\"/zh-cn/docs/api-boot-mybatis-enhance-codegen.html\" target=\"_blank\">ApiBoot Enhance Codegen</a>查看具体使用方式。\n下面是一个<code>动态实体</code>示例，通过<code>ApiBoot Enhance Codegen</code>自动生成，对应数据库内<code>user_info</code>表结构。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * 用户基本信息\n * <span class=\"hljs-doctag\">@author</span> ApiBoot Mybatis Enhance Codegen\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DUserInfo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">TableExpression</span>&lt;<span class=\"hljs-title\">UserInfo</span>&gt; </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DUserInfo</span><span class=\"hljs-params\">(String root)</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(root);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> DUserInfo <span class=\"hljs-title\">DSL</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DUserInfo(<span class=\"hljs-string\">\"user_info\"</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 用户主键\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ColumnExpression id = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"UI_ID\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-comment\">/**\n     * 用户编号\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ColumnExpression userNo = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"UI_USER_NO\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-comment\">/**\n     * 用户名\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ColumnExpression userName = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"UI_USER_NAME\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-comment\">/**\n     * 年龄\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ColumnExpression age = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"UI_AGE\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-comment\">/**\n     * 性别，boy：男,girl：女,other：其他\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ColumnExpression sex = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"UI_SEX\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-comment\">/**\n     * 创建时间\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ColumnExpression createTime = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"UI_CREATE_TIME\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-comment\">/**\n     * 1：正常，0：禁用，-1：删除\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ColumnExpression status = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"UI_STATUS\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-comment\">/**\n     * 备注信息\n     */</span>\n    <span class=\"hljs-keyword\">public</span> ColumnExpression mark = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"UI_MARK\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> ColumnExpression[] getColumns() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ColumnExpression[]{id, userNo, userName, age, sex, createTime, status, mark};\n    }\n\n}\n\n</code></pre>\n<h3>10.2 单表查询</h3>\n<p>下面从<code>查询单表</code>内的数据开始一一拆分讲解。</p>\n<h4>10.2.1 主键方式查询</h4>\n<p>我们了解了<code>EnhanceMapper</code>接口所提供了根据主键查询的<code>selectOne</code>方法，这两种方式最终的效果是一样的，<code>动态方式</code>的主键查询如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 实例化动态查询实体</span>\nDUserInfo dUserInfo = DUserInfo.DSL();\n<span class=\"hljs-comment\">// 从DUserInfo动态实体对应的数据表内查询主键为1的记录</span>\nUserInfo user = dslFactory.createSearchable().selectFrom(dUserInfo)\n    .where(dUserInfo.id.eq(<span class=\"hljs-number\">1</span>))\n    <span class=\"hljs-comment\">// 查询的返回值类型是UserInfo数据实体</span>\n    .resultType(UserInfo.class)\n    <span class=\"hljs-comment\">// 查询单条数据</span>\n    .fetchOne();\n</code></pre>\n<h4>10.2.2 非主键方式查询</h4>\n<p>通过动态方式查询，可以根据<code>动态实体</code>内的<code>任意一个</code>、或者<code>多个</code>字段作为查询条件，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 实例化动态查询实体</span>\nDUserInfo dUserInfo = DUserInfo.DSL();\n<span class=\"hljs-comment\">// 根据userNo字段查询数据</span>\nUserInfo user = dslFactory.createSearchable().selectFrom(dUserInfo)\n        .where(dUserInfo.userNo.eq(<span class=\"hljs-string\">\"2019xxx\"</span>))\n        .resultType(UserInfo.class)\n        .fetchOne();\n</code></pre>\n<h4>10.2.3 多条件组合查询</h4>\n<p>一个查询的<code>查询条件</code>可以有很多个，使用动态查询可以完成<code>and</code>、<code>or</code>的条件关联，模拟需求查询用户编号为<code>2019xxx</code>并且<code>大于20岁</code>的<code>男孩</code>指定某一个用户，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 实例化动态查询实体</span>\nDUserInfo dUserInfo = DUserInfo.DSL();\n<span class=\"hljs-comment\">// 根据userNo字段查询数据</span>\nUserInfo userInfo = dslFactory.createSearchable().selectFrom(dUserInfo)\n        <span class=\"hljs-comment\">// where userNo = 2019xxx</span>\n        .where(dUserInfo.userNo.eq(<span class=\"hljs-string\">\"2019xxx\"</span>))\n        <span class=\"hljs-comment\">// and sex = boy</span>\n        .and(dUserInfo.sex.eq(<span class=\"hljs-string\">\"boy\"</span>))\n        <span class=\"hljs-comment\">// and age &gt; 20</span>\n        .and(dUserInfo.age.gt(<span class=\"hljs-number\">20</span>))\n        .resultType(UserInfo.class)\n        .fetchOne();\n</code></pre>\n<p>上面动态查询对应生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-comment\">-- 生成的SQL</span>\nPreparing: <span class=\"hljs-keyword\">SELECT</span> iot_user_info.UI_ID,\n       iot_user_info.UI_USER_NO,\n       iot_user_info.UI_USER_NAME,\n       iot_user_info.UI_AGE,\n       iot_user_info.UI_SEX,\n       iot_user_info.UI_CREATE_TIME,\n       iot_user_info.UI_STATUS,\n       iot_user_info.UI_MARK\n<span class=\"hljs-keyword\">FROM</span> iot_user_info\n<span class=\"hljs-keyword\">WHERE</span> (iot_user_info.UI_USER_NO = ? <span class=\"hljs-keyword\">AND</span> iot_user_info.UI_SEX = ? <span class=\"hljs-keyword\">AND</span> iot_user_info.UI_AGE &gt; ?);\n<span class=\"hljs-comment\">-- 参数列表</span>\nParameters: 2019xxx(String), boy(String), 20(Integer)\n</code></pre>\n<p>下面我们模拟需求<code>查询25岁以下用户</code> 或 <code>性别为女孩</code>的用户列表，动态查询如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 实例化动态查询实体</span>\nDUserInfo dUserInfo = DUserInfo.DSL();\n<span class=\"hljs-comment\">// 根据userNo字段查询数据</span>\nList&lt;UserInfo&gt; users = dslFactory.createSearchable().selectFrom(dUserInfo)\n        <span class=\"hljs-comment\">// sex = girl</span>\n        .where(dUserInfo.sex.eq(<span class=\"hljs-string\">\"girl\"</span>))\n        <span class=\"hljs-comment\">// or age &lt; 25</span>\n        .or(dUserInfo.age.lt(<span class=\"hljs-number\">25</span>))\n        .resultType(UserInfo.class)\n        .fetch();\n</code></pre>\n<p>上面动态查询对应生成的<code>SQL</code>如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-comment\">-- 生成的SQL</span>\nPreparing: <span class=\"hljs-keyword\">SELECT</span> iot_user_info.UI_ID,\n       iot_user_info.UI_USER_NO,\n       iot_user_info.UI_USER_NAME,\n       iot_user_info.UI_AGE,\n       iot_user_info.UI_SEX,\n       iot_user_info.UI_CREATE_TIME,\n       iot_user_info.UI_STATUS,\n       iot_user_info.UI_MARK\n<span class=\"hljs-keyword\">FROM</span> iot_user_info\n<span class=\"hljs-keyword\">WHERE</span> (iot_user_info.UI_SEX = ?)\n   <span class=\"hljs-keyword\">OR</span> (iot_user_info.UI_AGE &lt; ?);\n<span class=\"hljs-comment\">-- 参数列表</span>\nParameters: girl(String), 25(Integer)\n</code></pre>\n<h3>10.3 多表关联查询</h3>\n<p><code>ApiBoot Enhance</code>支持<code>leftJoin</code>、<code>rightJoin</code>、<code>innerJoin</code>三种关联方式查询，这三种关联查询的使用方式一致，下面我们来看下多表关联的<code>leftJoin</code>实现方式：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\n<span class=\"hljs-comment\">// 系统用户角色关联动态实体</span>\nDSystemUserRole dSystemUserRole = DSystemUserRole.DSL();\n<span class=\"hljs-comment\">// 执行查询并且返回SystemUser类型对象</span>\nList&lt;UserInfo&gt; users = dslFactory.createSearchable()\n        .selectFrom(dSystemUser)\n        .leftJoin(dSystemUser.id, dSystemUserRole.userId)\n        .where(dSystemUserRole.roleId.eq(<span class=\"hljs-string\">\"367c8078-a1f1-11e9-9b7e-3417eb9c0f80\"</span>))\n        .and(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        .resultType(SystemUser.class)\n        .fetch();\n</code></pre>\n<p>在上面查询定义中，我们查询用户角色为<code>367c8078-a1f1-11e9-9b7e-3417eb9c0f80</code>的用户列表，并且用户的状态为<code>1</code>，在<code>leftJoin</code>方法内有两个动态实体的字段，这两个字段则是在表内存在<code>主外键关系</code>的（当然不存在主外键关系我们也可以进行关联查询）。</p>\n<p><code>leftJoin</code>方法参数分别代表了主外键的字段配置，具体配置内容如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 可以配置多个leftJoin进行关联多表查询</span>\nleftJoin(主表.主键,从表.外键);\n</code></pre>\n<p>上面查询代码对应生成<code>SQL</code>如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">SELECT</span> iot_system_user.SU_ID, iot_system_user.SU_USER_NAME, iot_system_user.SU_NICK_NAME, iot_system_user.SU_PASSWORD, iot_system_user.SU_STATUS, iot_system_user.SU_CREATE_TIME, iot_system_user.SU_MARK <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">OUTER</span> <span class=\"hljs-keyword\">JOIN</span> iot_system_user_role <span class=\"hljs-keyword\">on</span> iot_system_user_role.SUR_USER_ID = iot_system_user.SU_ID <span class=\"hljs-keyword\">WHERE</span> (iot_system_user_role.SUR_ROLE_ID = ? <span class=\"hljs-keyword\">AND</span> iot_system_user.SU_STATUS = ?)\n</code></pre>\n<h3>10.4 自定义返回类型</h3>\n<p>有时我们在进行关联或者单表查询时，只需要获取其中的某一个、多个字段，这时我们就可以通过<code>resultType</code>方法来定义返回的类型，如果是基本数据类型的封装类型（如：<code>Integer</code>、<code>Long</code>等）可以直接返回，如果查询结果是非单列数值时，我们可以<code>自定义返回类型</code>来进行<code>查询结果映射</code>，简单示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * 自定义系统用户数据转换实体\n *\n * <span class=\"hljs-doctag\">@author</span>：恒宇少年 - 于起宇\n * &lt;p&gt;\n * DateTime：2019-07-10 09:08\n * Blog：https://blog.yuqiyu.com\n * WebSite：http://www.jianshu.com/u/092df3f77bca\n * Gitee：https://gitee.com/hengboy\n * GitHub：https://github.com/hengboy\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SystemUserDTO</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * 主键\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"SU_ID\"</span>)\n    <span class=\"hljs-keyword\">private</span> String id;\n    <span class=\"hljs-comment\">/**\n     * 用户名\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"SU_USER_NAME\"</span>)\n    <span class=\"hljs-keyword\">private</span> String userName;\n    <span class=\"hljs-comment\">/**\n     * 用户昵称\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"SU_NICK_NAME\"</span>)\n    <span class=\"hljs-keyword\">private</span> String nickName;\n}\n</code></pre>\n<p>上面是我们定义的数据转换实体，用于接收查询数据表内的<code>多个字段</code>，查询代码如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态查询实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\nList&lt;UserInfo&gt; users = dslFactory.createSearchable()\n        <span class=\"hljs-comment\">// 只查询id、userName、nickName对应的列值</span>\n        .select(dSystemUser.id, dSystemUser.userName, dSystemUser.nickName)\n        <span class=\"hljs-comment\">// from table</span>\n        .from(dSystemUser)\n        .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-comment\">// 自定义实体类类型定义</span>\n        .resultType(SystemUserDTO.class)\n        .fetch();\n</code></pre>\n<p>上面查询代码对应生成的<code>SQL</code>如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">SELECT</span> iot_system_user.SU_ID, iot_system_user.SU_USER_NAME, iot_system_user.SU_NICK_NAME <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_STATUS = ?)\n</code></pre>\n<h3>10.5 列值匹配实体类字段</h3>\n<p><code>ApiBoot Enhance</code>在查询时，查询结果集的<code>列值</code>与实体类内的<code>字段值</code>对应关系是通过<code>@Column</code>注解的<code>name</code>属性来定的，如果查询结果集内的<code>列名</code>与实体类的<code>字段名</code><strong>一致</strong>，那么<code>@Column</code>注解可以不配置，如果不一致需要在<code>实体类字段上</code>配置<code>@Column(name='列名')</code>.</p>\n<h3>10.6 组装动态对象</h3>\n<p><code>ApiBoot Enhance</code>支持动态组装查询对象<code>Searchable</code>，当我们根据业务逻辑进行判断时可以动态组装查询条件、关联表、返回值、查询字段等，简单示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;SystemUser&gt; <span class=\"hljs-title\">assembleQuery</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">boolean</span> isJoin)</span> </span>{\n    <span class=\"hljs-comment\">// 系统用户动态查询对象</span>\n    DSystemUser dSystemUser = DSystemUser.DSL();\n    <span class=\"hljs-comment\">// 创建Searchable查询对象</span>\n    Searchable searchable = dslFactory.createSearchable().selectFrom(dSystemUser)\n            .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>));\n    <span class=\"hljs-comment\">// 根据参数组装关联查询</span>\n    <span class=\"hljs-keyword\">if</span> (isJoin) {\n        <span class=\"hljs-comment\">// 系统用户角色关联查询对象</span>\n        DSystemUserRole dSystemUserRole = DSystemUserRole.DSL();\n        searchable.leftJoin(dSystemUser.id, dSystemUserRole.userId);\n    }\n    <span class=\"hljs-comment\">// 设置返回值类型 &amp; 查询数据</span>\n    <span class=\"hljs-keyword\">return</span> searchable.resultType(SystemUser.class).fetch();\n}\n</code></pre>\n<p>上面查询代码中只是根据参数组装了<code>leftJoin</code>关联表，<code>ApiBoot Enhance</code>的组装动态查询还待开发者挖掘。</p>\n<h3>10.7 Count函数使用</h3>\n<p><code>ApiBoot Enhance</code>的动态查询不仅仅可以做<code>数据查询</code>，也可以做<code>数据统计</code>，使用<strong>count</strong>函数以及查询条件就可以实现复杂的数据统计功能，示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态查询实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\n<span class=\"hljs-comment\">// 系统用户角色动态查询实体</span>\nDSystemUserRole dSystemUserRole = DSystemUserRole.DSL();\nLong count = dslFactory.createSearchable()\n        <span class=\"hljs-comment\">// 建议使用主键统计，主键索引效率会有显著提升</span>\n        .count(dSystemUser.id)\n        .from(dSystemUser)\n        .leftJoin(dSystemUser.id, dSystemUserRole.userId)\n        .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-comment\">// 统计的结果类型</span>\n        .resultType(Long.class)\n        <span class=\"hljs-comment\">// 查询单个结果</span>\n        .fetchOne();\n</code></pre>\n<p><code>数据统计</code>的查询条件跟<code>数据查询</code>完全一致，可以进行单表、多表关联、组装查询条件等。\n上面<code>数据统计</code>动态查询生成的<code>SQL</code>如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">count</span>(iot_system_user.SU_ID) SU_ID <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">OUTER</span> <span class=\"hljs-keyword\">JOIN</span> iot_system_user_role <span class=\"hljs-keyword\">on</span> iot_system_user_role.SUR_USER_ID = iot_system_user.SU_ID <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_STATUS = ?)\n</code></pre>\n<h3>10.8 Avg函数使用</h3>\n<p><code>ApiBoot Enhance</code>还支持针对某一个字段的<code>平均值</code>查询，使用<strong>avg</strong>函数以及查询条件可以实现复杂的平均值计算，示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态查询实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\nInteger avgAge = dslFactory.createSearchable()\n        <span class=\"hljs-comment\">// 查询用户年龄平均值</span>\n        .avg(dSystemUser.age)\n        .from(dSystemUser)\n        <span class=\"hljs-comment\">// 用户状态为1</span>\n        .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-comment\">// 返回值类型为Integer，根据age对应表内字段而定</span>\n        .resultType(Integer.class)\n        <span class=\"hljs-comment\">// 查询单个结果</span>\n        .fetchOne();\n</code></pre>\n<p>上面动态查询生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">avg</span>(iot_system_user.SU_AGE) SU_AGE <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_STATUS = ?)\n</code></pre>\n<h3>10.9 Sum函数使用</h3>\n<p><code>ApiBoot Enhance</code>支持针对某一个字段的<code>总和</code>查询，使用<strong>sum</strong>函数以及查询条件可以实现复杂的总和计算，示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态查询实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\nLong sum = dslFactory.createSearchable()\n        <span class=\"hljs-comment\">// 查询用户年龄总和</span>\n        .sum(dSystemUser.age)\n        .from(dSystemUser)\n        <span class=\"hljs-comment\">// 用户状态为1</span>\n        .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-comment\">// 返回值类型为Integer，根据age对应表内字段而定</span>\n        .resultType(Long.class)\n        <span class=\"hljs-comment\">// 查询单个结果</span>\n        .fetchOne();\n</code></pre>\n<p>上面动态查询生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">sum</span>(iot_system_user.SU_AGE) SU_AGE <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_STATUS = ?)\n</code></pre>\n<h3>10.10 Min函数使用</h3>\n<p><code>ApiBoot Enhance</code>支持针对某一个字段的<code>最小值</code>查询，使用<strong>min</strong>函数以及查询条件可以实现复杂查询指定字段的最小值计算，示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态查询实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\nInteger min = dslFactory.createSearchable()\n        <span class=\"hljs-comment\">// 查询最小年龄的用户</span>\n        .min(dSystemUser.age)\n        .from(dSystemUser)\n        <span class=\"hljs-comment\">// 用户状态为1</span>\n        .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-comment\">// 返回值类型为Integer，根据age对应表内字段而定</span>\n        .resultType(Integer.class)\n        <span class=\"hljs-comment\">// 查询单个结果</span>\n        .fetchOne();\n</code></pre>\n<p>上面动态查询生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">min</span>(iot_system_user.SU_AGE) SU_AGE <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_STATUS = ?)\n</code></pre>\n<h3>10.11 Max函数使用</h3>\n<p><code>ApiBoot Enhance</code>支持针对某一个字段的<code>最大值</code>查询，使用<strong>max</strong>函数以及查询条件可以实现指定字段复杂查询的最大值计算，示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态查询实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\nInteger max = dslFactory.createSearchable()\n        <span class=\"hljs-comment\">// 查询最大年龄的用户</span>\n        .max(dSystemUser.age)\n        .from(dSystemUser)\n        <span class=\"hljs-comment\">// 用户状态为1</span>\n        .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-comment\">// 返回值类型为Integer，根据age对应表内字段而定</span>\n        .resultType(Integer.class)\n        <span class=\"hljs-comment\">// 查询单个结果</span>\n        .fetchOne();\n</code></pre>\n<p>上面动态查询生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">max</span>(iot_system_user.SU_AGE) SU_AGE <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_STATUS = ?)\n</code></pre>\n<h2>11. 动态更新</h2>\n<p><code>EnhanceMapper</code>接口内提供了<code>update</code>方法可以更新整个对象，如果我们只更新其中某一个、多个字段时<code>update</code>方法无法满足我们的需求，而<code>ApiBoot Enhance DSL</code>的动态更新可以完成这一需求，示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\ndslFactory.createUpdateable()\n        <span class=\"hljs-comment\">// 需要更新的表对应的动态实体</span>\n        .update(dSystemUser)\n        <span class=\"hljs-comment\">// 更新age对应列值 = 25</span>\n        .set(SetFilter.set(dSystemUser.age, <span class=\"hljs-number\">25</span>))\n        <span class=\"hljs-comment\">// 更新mark对应列值 = 备注信息</span>\n        .set(SetFilter.set(dSystemUser.mark, <span class=\"hljs-string\">\"备注信息\"</span>))\n        <span class=\"hljs-comment\">// 指定更新用户</span>\n        .where(dSystemUser.id.eq(<span class=\"hljs-string\">\"58eea57e-a1f1-11e9-9b7e-3417eb9c0f80\"</span>))\n        <span class=\"hljs-comment\">// 执行更新</span>\n        .execute();\n</code></pre>\n<p>上面动态更新语句对应生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-comment\">-- sql</span>\nPreparing: <span class=\"hljs-keyword\">UPDATE</span> iot_system_user <span class=\"hljs-keyword\">SET</span> iot_system_user.SU_AGE = ? , iot_system_user.SU_MARK = ? <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_ID = ?)\n<span class=\"hljs-comment\">-- 参数</span>\n<span class=\"hljs-keyword\">Parameters</span>: <span class=\"hljs-number\">25</span>(<span class=\"hljs-built_in\">Integer</span>), 备注信息(<span class=\"hljs-keyword\">String</span>), <span class=\"hljs-number\">58</span>eea57e-a1f1<span class=\"hljs-number\">-11e9</span><span class=\"hljs-number\">-9</span>b7e<span class=\"hljs-number\">-3417</span>eb9c0f80(<span class=\"hljs-keyword\">String</span>)\n</code></pre>\n<h2>12. 动态删除</h2>\n<p><code>EnhanceMapper</code>接口提供的<code>delete</code>方法只可以根据主键操作数据，我们通过<code>ApiBoot Enhnace DSL</code>可以完成指定条件筛选删除，示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\ndslFactory.createDeleteable()\n        <span class=\"hljs-comment\">// 删除动态实体对应表内的数据</span>\n        .delete(dSystemUser)\n        <span class=\"hljs-comment\">// status对应列值 = 1</span>\n        .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-comment\">// age对应列值 &gt; 25</span>\n        .and(dSystemUser.age.gt(<span class=\"hljs-number\">25</span>))\n        <span class=\"hljs-comment\">// 执行删除</span>\n        .execute();\n</code></pre>\n<p>上面动态删除语句对应生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-comment\">-- sql</span>\nPreparing: <span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_STATUS = ? <span class=\"hljs-keyword\">AND</span> iot_system_user.SU_AGE &gt; ?)\n<span class=\"hljs-comment\">-- 参数</span>\n<span class=\"hljs-keyword\">Parameters</span>: <span class=\"hljs-number\">1</span>(<span class=\"hljs-built_in\">Integer</span>), <span class=\"hljs-number\">25</span>(<span class=\"hljs-built_in\">Integer</span>)\n</code></pre>\n<h2>13. 排序</h2>\n<p><code>ApiBoot Enhance</code>动态查询支持根据<code>查询字段</code>进行<code>正序</code>、<code>倒序</code>两种方式进行排序，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\nList&lt;SystemUser&gt; users = dslFactory.createSearchable()\n        .selectFrom(dSystemUser)\n        <span class=\"hljs-comment\">// 查询status字段对应列值 = 1</span>\n        .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-comment\">// 根据age字段对应列值，正序排序，年龄从小到大排序</span>\n        .orderBy(dSystemUser.age, SortEnum.ASC)\n        .resultType(SystemUser.class)\n        .fetch();\n</code></pre>\n<p><code>SortEnum</code>是一个排序的枚举，参考值如下所示：</p>\n<ul>\n<li><code>ASC</code>：正序</li>\n<li><code>DESC</code>：倒序</li>\n</ul>\n<p>上面动态查询排序语句对应生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">SELECT</span> iot_system_user.SU_ID, iot_system_user.SU_USER_NAME, iot_system_user.SU_NICK_NAME, iot_system_user.SU_AGE, iot_system_user.SU_PASSWORD, iot_system_user.SU_STATUS, iot_system_user.SU_CREATE_TIME, iot_system_user.SU_MARK <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_STATUS = ?) <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> iot_system_user.SU_AGE <span class=\"hljs-keyword\">ASC</span>\n</code></pre>\n<h2>14. 分页</h2>\n<p><code>ApiBoot Enhance</code> 在使用<code>动态查询</code>时可以对<code>结果集</code>进行<code>分页</code>，简单示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\nList&lt;SystemUser&gt; users = dslFactory.createSearchable()\n        .selectFrom(dSystemUser)\n        <span class=\"hljs-comment\">// 查询status字段对应列值 = 1</span>\n        .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-comment\">// 根据age字段对应列值，正序排序，年龄从小到大排序</span>\n        .orderBy(dSystemUser.age, SortEnum.ASC)\n        <span class=\"hljs-comment\">// 分页的开始位置，0是第一条</span>\n        .offset(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-comment\">// 每页查询20条</span>\n        .limit(<span class=\"hljs-number\">20</span>)\n        .resultType(SystemUser.class)\n        .fetch();\n</code></pre>\n<blockquote>\n<p>上面动态查询系统用户表内<code>status=1</code>的用户列表，并且根据<code>age</code>字段进行<code>ASC</code>方式排序，查询出<code>0-20</code>条数据。</p>\n</blockquote>\n<p><code>ApiBoot Enhance</code>的动态分页提供了两个函数，分别是：<code>offset</code>、<code>limit</code>。</p>\n<ul>\n<li><code>offset()</code>：分页开始位置，从0开始</li>\n<li><code>limit()</code>：每页查询记录数量</li>\n</ul>\n<p>上面分页动态查询对应生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-comment\">-- sql</span>\nPreparing: <span class=\"hljs-keyword\">SELECT</span> iot_system_user.SU_ID, iot_system_user.SU_USER_NAME, iot_system_user.SU_NICK_NAME, iot_system_user.SU_AGE, iot_system_user.SU_PASSWORD, iot_system_user.SU_STATUS, iot_system_user.SU_CREATE_TIME, iot_system_user.SU_MARK <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_STATUS = ?) <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> iot_system_user.SU_AGE <span class=\"hljs-keyword\">ASC</span> <span class=\"hljs-keyword\">limit</span> ?,?\n<span class=\"hljs-comment\">-- 参数</span>\n<span class=\"hljs-keyword\">Parameters</span>: <span class=\"hljs-number\">1</span>(<span class=\"hljs-built_in\">Integer</span>), <span class=\"hljs-number\">0</span>(<span class=\"hljs-built_in\">Integer</span>), <span class=\"hljs-number\">20</span>(<span class=\"hljs-built_in\">Integer</span>)\n</code></pre>\n<h2>15. 分组</h2>\n<p><code>ApiBoot Enhance</code>支持对指定字段查询分组，示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 系统用户动态实体</span>\nDSystemUser dSystemUser = DSystemUser.DSL();\nList&lt;SystemUser&gt; users = dslFactory.createSearchable()\n        <span class=\"hljs-comment\">// 查询分组的字段</span>\n        <span class=\"hljs-comment\">// 最小年龄</span>\n        .select(dSystemUser.userName, dSystemUser.age.min())\n        .from(dSystemUser)\n        <span class=\"hljs-comment\">// 查询status字段对应列值 = 1</span>\n        .where(dSystemUser.status.eq(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-comment\">// 根据userName字段对应的列分组</span>\n        .groupBy(dSystemUser.userName)\n        .resultType(SystemUser.class)\n        .fetch();\n</code></pre>\n<blockquote>\n<p>在上面动态查询中，根据<code>userName</code>对应的列值进行分组。</p>\n</blockquote>\n<p>上面分页动态查询对应生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-comment\">-- sql</span>\nPreparing: <span class=\"hljs-keyword\">SELECT</span> iot_system_user.SU_USER_NAME, <span class=\"hljs-keyword\">min</span>(iot_system_user.SU_AGE) SU_AGE <span class=\"hljs-keyword\">FROM</span> iot_system_user <span class=\"hljs-keyword\">WHERE</span> (iot_system_user.SU_STATUS = ?) <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> iot_system_user.SU_USER_NAME\n<span class=\"hljs-comment\">-- 参数</span>\n<span class=\"hljs-keyword\">Parameters</span>: <span class=\"hljs-number\">1</span>(<span class=\"hljs-built_in\">Integer</span>)\n</code></pre>\n<h2>16. 方法规则</h2>\n<p><code>ApiBoot Enhance</code> 提供的<code>方法规则查询</code>不同于<code>动态查询</code>，并不需要编写过多的代码就可以实现多条件查询单条、多条数据，只需要通过在<code>Mapper</code>接口内根据方法命名的规则来生成对应的<code>SqlSource</code>以及<code>Statement</code>。</p>\n<h3>16.1 正则表达式匹配方法名</h3>\n<p><code>方法命名规则</code>内部是通过<code>正则表达式</code>进行提取查询的字段。</p>\n<p><strong>查询方法命名规则</strong>前缀为：<strong>findBy</strong>，根据某一个字段查询时可以写成<code>findByXxx</code>，如果根据多个字段则写成<code>findByXxxAndXxx</code>，当然也可以根据<code>Or</code>关键字进行查询，注意完全遵循<code>驼峰命名方式</code>来声明<code>方法的名称</code>，方法的返回值必须是声明方法内<code>Mapper</code>对应<code>数据实体类型</code>，可以是<code>单个对象</code>、也可以是<code>List&lt;对象&gt;</code>。</p>\n<p><strong>删除方法命名规则</strong>前缀为：<strong>removeBy</strong>，根据某一个字段删除数据时可以写成<code>remoteByXxx</code>，如果根据多个字段则可以写成<code>remoteByXxxAndXxx</code>，删除方法没有返回值。</p>\n<p><strong>统计方法命名规则</strong>前缀为：<strong>countBy</strong>，根据主键进行统计数据，根据某一个字段作为查询条件可以成<code>countByXxx</code>，如果根据多个字段则可以写成<code>countByXxxAndXxx</code>，方法返回值为<code>Long</code>类型。</p>\n<blockquote>\n<p>注意：方法命名规则的关联关系可以使用<code>And</code>也可以使用<code>Or</code>，尽量排除两种关系字符存在一个方法名称上。</p>\n</blockquote>\n<h3>16.2 规则条件查询数据</h3>\n<p>通过下面<code>方法命名规则</code>定义的方法来查看<code>ApiBoot Enhance</code>对应给生成的查询语句：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SystemUserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">EnhanceMapper</span>&lt;<span class=\"hljs-title\">SystemUser</span>, <span class=\"hljs-title\">String</span>&gt; </span>{\n    <span class=\"hljs-comment\">/**\n     * 根据userName查询单条记录\n     *\n     * <span class=\"hljs-doctag\">@param</span> userName\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">SystemUser <span class=\"hljs-title\">findByUserName</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"userName\"</span>)</span> String userName)</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 根据userName and status 查询\n     *\n     * <span class=\"hljs-doctag\">@param</span> userName\n     * <span class=\"hljs-doctag\">@param</span> userStatus\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">SystemUser <span class=\"hljs-title\">findByUserNameAndStatus</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"userName\"</span>)</span> String userName, @<span class=\"hljs-title\">Param</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"status\"</span>)</span> Integer userStatus)</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 根据status查询多条记录\n     *\n     * <span class=\"hljs-doctag\">@param</span> userStatus\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">List&lt;SystemUser&gt; <span class=\"hljs-title\">findByStatus</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"status\"</span>)</span> Integer userStatus)</span>;\n}\n</code></pre>\n<blockquote>\n<p><code>方法规则查询</code>有局限性，并不如<code>动态查询</code>灵活。</p>\n</blockquote>\n<p>对应上面查询方法生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-comment\">-- findByUserName</span>\n<span class=\"hljs-keyword\">SELECT</span> SU_ID, SU_USER_NAME, SU_NICK_NAME, SU_AGE, SU_PASSWORD, SU_STATUS, SU_CREATE_TIME, SU_MARK <span class=\"hljs-keyword\">FROM</span> IOT_SYSTEM_USER <span class=\"hljs-keyword\">WHERE</span> SU_USER_NAME = ?\n\n<span class=\"hljs-comment\">-- findByUserNameAndStatus</span>\n<span class=\"hljs-keyword\">SELECT</span> SU_ID, SU_USER_NAME, SU_NICK_NAME, SU_AGE, SU_PASSWORD, SU_STATUS, SU_CREATE_TIME, SU_MARK <span class=\"hljs-keyword\">FROM</span> IOT_SYSTEM_USER <span class=\"hljs-keyword\">WHERE</span> SU_USER_NAME = ? <span class=\"hljs-keyword\">AND</span> SU_STATUS = ?\n\n<span class=\"hljs-comment\">-- findByStatus</span>\n<span class=\"hljs-keyword\">SELECT</span> SU_ID, SU_USER_NAME, SU_NICK_NAME, SU_AGE, SU_PASSWORD, SU_STATUS, SU_CREATE_TIME, SU_MARK <span class=\"hljs-keyword\">FROM</span> IOT_SYSTEM_USER <span class=\"hljs-keyword\">WHERE</span> SU_STATUS = ?\n</code></pre>\n<h3>16.3 规则条件统计数据</h3>\n<p><code>ApiBoot Enhance</code> 提供的方法命名规则统计，默认统计<code>主键列</code>目前无法修改默认方式，方法命名规则统计数据方法名定义方式如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SystemUserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">EnhanceMapper</span>&lt;<span class=\"hljs-title\">SystemUser</span>, <span class=\"hljs-title\">String</span>&gt; </span>{\n    <span class=\"hljs-comment\">//...</span>\n    <span class=\"hljs-comment\">/**\n     * 根据状态统计\n     *\n     * <span class=\"hljs-doctag\">@param</span> status\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">Long <span class=\"hljs-title\">countByStatus</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"status\"</span>)</span> Integer status)</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 根据用户名 and 状态统计\n     *\n     * <span class=\"hljs-doctag\">@param</span> userName\n     * <span class=\"hljs-doctag\">@param</span> userStatus\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">Long <span class=\"hljs-title\">countByUserNameAndStatus</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"userName\"</span>)</span> String userName, @<span class=\"hljs-title\">Param</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"status\"</span>)</span> Integer userStatus)</span>;\n}\n</code></pre>\n<p>对应上面统计方法生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-comment\">-- countByStatus</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">COUNT</span>(SU_ID) <span class=\"hljs-keyword\">FROM</span> IOT_SYSTEM_USER <span class=\"hljs-keyword\">WHERE</span> SU_STATUS = ?\n\n<span class=\"hljs-comment\">-- countByUserNameAndStatus</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">COUNT</span>(SU_ID) <span class=\"hljs-keyword\">FROM</span> IOT_SYSTEM_USER <span class=\"hljs-keyword\">WHERE</span> SU_USER_NAME = ? <span class=\"hljs-keyword\">AND</span> SU_STATUS = ?\n</code></pre>\n<h3>16.4 规则条件删除数据</h3>\n<p>方法名称规则删除示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SystemUserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">EnhanceMapper</span>&lt;<span class=\"hljs-title\">SystemUser</span>, <span class=\"hljs-title\">String</span>&gt; </span>{\n    <span class=\"hljs-comment\">/**\n     * 根据状态删除\n     *\n     * <span class=\"hljs-doctag\">@param</span> status\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeByStatus</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"status\"</span>)</span> Integer status)</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 根据用户名 and 状态删除\n     *\n     * <span class=\"hljs-doctag\">@param</span> userName\n     * <span class=\"hljs-doctag\">@param</span> userStatus\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeByUserNameAndStatus</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"userName\"</span>)</span> String userName, @<span class=\"hljs-title\">Param</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"status\"</span>)</span> Integer userStatus)</span>;\n}\n</code></pre>\n<p>对应上面删除方法生成的<code>SQL</code>，如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-comment\">-- removeByStatus</span>\n<span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> IOT_SYSTEM_USER <span class=\"hljs-keyword\">WHERE</span> SU_STATUS = ?\n\n<span class=\"hljs-comment\">-- removeByUserNameAndStatus</span>\n<span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> IOT_SYSTEM_USER <span class=\"hljs-keyword\">WHERE</span> SU_USER_NAME = ? <span class=\"hljs-keyword\">AND</span> SU_STATUS = ?\n</code></pre>\n",
  "link": "/zh-cn/docs/2.1.1.RELEASE/api-boot-mybatis-enhance.html",
  "meta": {
    "title": "ApiBoot Mybatis Enhance 使用文档"
  }
}