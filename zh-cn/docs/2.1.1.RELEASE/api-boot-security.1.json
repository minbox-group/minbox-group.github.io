{
  "filename": "api-boot-security.1.md",
  "__html": "<h1>ApiBoot 整合 Spring Security组件</h1>\n<p><code>ApiBoot</code>内部整合了<code>Spring Security</code>组件，通过简单的几个配置信息就可以完成<code>默认方式</code>的集成使用，通过参数配置(<code>application.yml、application.properties</code>)的形式来改变原始的侵入式代码配置，提高开发效率，减少繁琐代码编写,<code>ApiBoot Security</code>提供了两种数据存储方式来快速集成<code>Spring Security</code>的用户数据读取，分别是<code>内存方式</code>、<code>JDBC方式</code>，我们下面针对每一种方式提供对应的参数解释以及使用介绍。</p>\n<h2>1. 添加组件依赖</h2>\n<p>在<code>pom.xml</code>配置文件内添加如下：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Security Oauth--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-security-oauth-jwt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<h2>2. 内存方式</h2>\n<p><code>ApiBoot Security</code>默认使用<code>内存方式(memory)</code>来读取用户信息。</p>\n<h3>2.1 配置内存用户列表</h3>\n<p>如果你的接口服务项目并未添加数据库依赖，这时可以使用<code>ApiBoot Security</code>的内存方式配置用户列表，通过<code>api.boot.security.users</code>配置参数进行设置，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n    <span class=\"hljs-attr\">security:</span>\n      <span class=\"hljs-comment\"># Spring Security 内存方式用户列表示例</span>\n      <span class=\"hljs-attr\">users:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">hengboy</span>\n          <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n          <span class=\"hljs-attr\">roles:</span> <span class=\"hljs-string\">good</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">apiboot</span>\n          <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">abc321</span>\n          <span class=\"hljs-attr\">roles:</span> <span class=\"hljs-string\">user,order</span>\n</code></pre>\n<ul>\n<li><code>username</code>：配置内存用户用户名</li>\n<li><code>password</code>：配置内存用户密码（这里配置密码为明文），<code>ApiBoot Security</code>把用户信息交付给<code>Spring Security</code>时，密码会通过<code>BCryptPasswordEncoder</code>加密方式进行加密，保证用户密码安全性，该加密方式不可逆。</li>\n<li><code>roles</code>：配置内存用户角色列表，多个采用逗号隔开</li>\n</ul>\n<h2>3. JDBC方式</h2>\n<p>如果你的接口服务项目需要读取<code>数据库内</code>的<code>用户</code>进行<code>安全验证</code>，<code>ApiBoot Security</code>提供了<code>读取默认用户表方式</code>、<code>自定义读取用户方式</code>两种途径。</p>\n<h3>3.1 使用前的准备工作</h3>\n<ul>\n<li>\n<p><strong>前提一：需要添加数据库连接依赖</strong></p>\n<p>如果你所使用的是<code>MySQL</code>数据库，可以添加如下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>其他类型的数据库请自行查找使用。</p>\n</li>\n<li>\n<p><strong>前提二：数据源驱动</strong></p>\n<p>提供数据源的实现方式有很多种，建议使用<code>SpringBoot</code>内置的数据源，如下所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.zaxxer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>HikariCP<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>当然也可以使用阿里巴巴开源的<code>Druid</code>数据源依赖，依赖如下所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.1.17<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n</li>\n</ul>\n<h3>3.2 开启ApiBoot Security JDBC方式</h3>\n<p>开启<code>ApiBoot Security</code>的<code>JDBC</code>方式读取用户信息，首先我们需要修改<code>application.properties</code>配置文件内的<code>api.boot.security.away</code>参数，如下所示：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">api.boot.security.away</span>=<span class=\"hljs-string\">jdbc</span>\n</code></pre>\n<h3>3.3 使用内置表结构的用户</h3>\n<p><code>ApiBoot Security</code>为了方便让开发者更快速的配置读取数据库的用户列表，内部约定了名为<strong>api_boot_user_info</strong>表来存储用户信息，表结构如下所示：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`api_boot_user_info`</span> (\n  <span class=\"hljs-string\">`UI_ID`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'用户编号，主键自增'</span>,\n  <span class=\"hljs-string\">`UI_USER_NAME`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">30</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'用户名'</span>,\n  <span class=\"hljs-string\">`UI_NICK_NAME`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">50</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'用户昵称'</span>,\n  <span class=\"hljs-string\">`UI_PASSWORD`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'用户密码'</span>,\n  <span class=\"hljs-string\">`UI_EMAIL`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">30</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'用户邮箱地址'</span>,\n  <span class=\"hljs-string\">`UI_AGE`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'用户年龄'</span>,\n  <span class=\"hljs-string\">`UI_ADDRESS`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">200</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'用户地址'</span>,\n  <span class=\"hljs-string\">`UI_IS_LOCKED`</span> <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">'N'</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'是否锁定'</span>,\n  <span class=\"hljs-string\">`UI_IS_ENABLED`</span> <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">'Y'</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'是否启用'</span>,\n  <span class=\"hljs-string\">`UI_STATUS`</span> <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">'O'</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'O：正常，D：已删除'</span>,\n  <span class=\"hljs-string\">`UI_CREATE_TIME`</span> <span class=\"hljs-built_in\">timestamp</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">current_timestamp</span>() <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'用户创建时间'</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`UI_ID`</span>)\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8 <span class=\"hljs-keyword\">COMMENT</span>=<span class=\"hljs-string\">'ApiBoot默认的用户信息表'</span>;\n</code></pre>\n<p>如果你使用默认表结构，需要将上面的建表语句在你的数据库内进行执行创建表。</p>\n<blockquote>\n<p>注意：</p>\n<ol>\n<li><code>api_boot_user_info</code>表内的密码字段（UI_PASSWORD）的值必须是通过<code>BCryptPasswordEncoder</code>加密后的密文字符串。</li>\n<li>如果用户锁定了（UI_IS_LOCKED字段的值为Y）无法登录系统 (使用默认值即可)</li>\n<li>如果用户未启用（UI_IS_ENABLED字段的值为N）无法登录系统 (使用默认值即可)</li>\n</ol>\n</blockquote>\n<h3>3.4 ApiBootStoreDelegate接口</h3>\n<p><code>ApiBoot Security</code>其实是自己内部默认实现了<code>ApiBootStoreDelegate</code>接口，来进行默认读取<code>api_boot_user_info</code>表内的数据，具体实现方式可以查看<code>org.minbox.framework.api.boot.plugin.security.delegate.ApiBootDefaultStoreDelegate</code>。</p>\n<p><code>ApiBootStoreDelegate</code>接口是<code>ApiBoot Security</code>提供的读取自定义用户数据的代理方式接口，该接口仅有<code>loadUserByUsername</code>一个方法，我们如果自定义读取用户表(非<code>api_boot_user_info</code>表)也同样需要使用到它，具体实现方式详见下面文档。</p>\n<h3>3.5 自定义读取用户信息</h3>\n<p>在实际的应用中，一般都会有自己项目对应的用户信息，如果想让<code>ApiBoot Security</code>读取自己用户表来进行认证登录，该怎么去做呢？</p>\n<h4>3.5.1 禁用默认读取用户方式</h4>\n<p>由于<code>ApiBoot Security</code>内置了默认读取用户的方式，我们首先需要禁用掉它，可以通过<code>api.boot.security.enable-default-store-delegate=false</code>参数配置禁用默认方式。</p>\n<p>禁用默认读取用户方式后，我们需要来实现<code>ApiBootStoreDelegate</code>接口来编写读取自己用户表内的数据。</p>\n<h4>3.5.2 实现ApiBootStoreDelegate接口</h4>\n<p>实现<code>ApiBootStoreDelegate</code>接口的实现类后需要让<code>Spring IOC</code>进行托管，这样才可以生效，简单示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CustomUserStoreDelegate</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ApiBootStoreDelegate</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * 返回根据username查询的用户详情对象\n     * UserDetails是SpringSecurity提供的用户详情接口\n     * 返回的自定义用户对象需实现UserDetails接口\n     * <span class=\"hljs-doctag\">@param</span> username 用户名\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> UsernameNotFoundException\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserDetails <span class=\"hljs-title\">loadUserByUsername</span><span class=\"hljs-params\">(String username)</span> <span class=\"hljs-keyword\">throws</span> UsernameNotFoundException </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    }\n}\n</code></pre>\n<h2>4. 默认排除路径</h2>\n<p><code>ApiBoot Security</code>为了方便整合<code>Swagger</code>、<code>Actuator</code>等，在<code>ApiBootSecurityProperties</code>属性配置类内默认添加了的排除权限拦截的路径列表，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * 默认的排除路径列表\n  */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] DEFAULT_IGNORE_URLS = <span class=\"hljs-keyword\">new</span> String[]{\n  <span class=\"hljs-string\">\"/v2/api-docs\"</span>,\n  <span class=\"hljs-string\">\"/swagger-ui.html\"</span>,\n  <span class=\"hljs-string\">\"/swagger-resources/configuration/security\"</span>,\n  <span class=\"hljs-string\">\"/META-INF/resources/webjars/**\"</span>,\n  <span class=\"hljs-string\">\"/webjars/**\"</span>,\n  <span class=\"hljs-string\">\"/swagger-resources\"</span>,\n  <span class=\"hljs-string\">\"/swagger-resources/configuration/ui\"</span>,\n  <span class=\"hljs-string\">\"/actuator/**\"</span>\n};\n</code></pre>\n<h2>5. 自定义排除路径</h2>\n<p>如果我们需要自定义排除路径可以通过<code>api.boot.security.ignoreing-urls</code>参数进行配置，该参数使用数组方式接受值，多个使用逗号隔开或者使用集合形式配置（注意：默认排除的路径不会被替换），如下所示：</p>\n<h2>5.1 逗号隔开形式配置排除路径列表</h2>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n    <span class=\"hljs-attr\">security:</span>\n      <span class=\"hljs-attr\">ignoring-urls:</span> <span class=\"hljs-string\">/login,/register,/code/send</span>\n</code></pre>\n<h2>5.2 集合形式配置排除路径列表</h2>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n    <span class=\"hljs-attr\">security:</span>\n      <span class=\"hljs-attr\">ignoring-urls:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/login</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/register</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/code/send</span>\n</code></pre>\n<h2>6. 禁用HttpBasic</h2>\n<p><code>http basic</code>默认是被禁用的状态，如需开启，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n    <span class=\"hljs-attr\">security:</span>\n      <span class=\"hljs-comment\"># 开启http basic</span>\n      <span class=\"hljs-attr\">disable-http-basic:</span> <span class=\"hljs-literal\">false</span>\n</code></pre>\n<blockquote>\n<p>具体开启http basic后的注意事情，请查阅SpringSecurity相关文档。</p>\n</blockquote>\n<h2>7. 禁用CSRF</h2>\n<p><code>csrf</code>默认是被禁用的状态，如需开启，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n    <span class=\"hljs-attr\">security:</span>\n      <span class=\"hljs-comment\"># 开启csrf</span>\n      <span class=\"hljs-attr\">disable-csrf:</span> <span class=\"hljs-literal\">false</span>\n</code></pre>\n<blockquote>\n<p>具体开启CSRF后的注意事情，请查阅SpringSecurity相关文档。</p>\n</blockquote>\n<h2>8. 资源保护路径前缀</h2>\n<p><code>ApiBoot Security Oauth</code>默认保护的路径是<code>/api/**</code>，该参数也是采用了数组的形式接收配置值，具体配置如下所示：</p>\n<h3>8.1 逗号隔开形式配置资源保护路径</h3>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n    <span class=\"hljs-attr\">security:</span>\n      <span class=\"hljs-attr\">auth-prefix:</span> <span class=\"hljs-string\">/user/**,/order/**</span>\n</code></pre>\n<h3>8.2 集合形式配置资源保护路径</h3>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n    <span class=\"hljs-attr\">security:</span>\n      <span class=\"hljs-attr\">auth-prefix:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/user/**</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/order/**</span>\n</code></pre>\n",
  "link": "/zh-cn/docs/2.1.1.RELEASE/api-boot-security.1.html",
  "meta": {
    "title": "ApiBoot Security 使用文档"
  }
}