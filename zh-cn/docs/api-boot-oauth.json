{
  "filename": "api-boot-oauth.md",
  "__html": "<h1>ApiBoot 整合 OAuth2组件</h1>\n<p><code>ApiBoot</code>整合<code>OAuth2</code>来完成资源的保护，通过在配置文件的具体配置来完成自动化集成，降低入门门槛。</p>\n<p><code>ApiBoot OAuth</code>同样是提供了两种方式：<code>内存方式</code>、<code>JDBC方式</code>来进行存储<code>Token</code>、<code>客户端</code>等信息，后期规划集成<code>Redis</code>进行存储<code>AccessToken</code>令牌信息，<code>ApiBoot OAuth</code>需要整合<code>ApiBoot Security</code>来配合使用，正因为如此，<code>ApiBoot</code>在构建<code>Starter</code>时将两者合并为了一个。</p>\n<h2>1. 添加依赖组件</h2>\n<p>在项目的<code>pom.xml</code>文件内添加如下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Security Oauth--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-security-oauth-jwt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<h2>2. 内存方式</h2>\n<p><code>memory（内存方式）</code>也是<code>ApiBoot OAuth</code>的默认方式，会将生成的<code>access_token</code>存放在内存中，通过我们简单的配置就可以完成快速集成<code>OAuth2</code>来保护你的接口资源，下面详细解释配置的作用。</p>\n<h3>2.1 配置客户端信息</h3>\n<p><code>client</code>的概念在<code>OAuth2</code>里面相信大家并不陌生，只有被授权的客户端才可以访问<code>/oauth/token</code>获取对应的<code>access_token</code>访问令牌，而<code>ApiBoot OAuth</code>的内存方式客户端信息是在<code>application.yml、application.properties</code>文件内进行配置，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    oauth:</span>\n      \t<span class=\"hljs-attr\">client-id:</span> <span class=\"hljs-string\">ApiBoot</span>\n      \t<span class=\"hljs-attr\">client-secret:</span> <span class=\"hljs-string\">ApiBootSecret</span>\n</code></pre>\n<ul>\n<li><code>api.boot.oauth.client-id</code>：配置客户端编号信息（获取<code>access_token</code>时携带的<code>Basic Auth</code>的用户名），该参数默认值为<code>ApiBoot</code></li>\n<li><code>api.boot.oauth.client-secret</code>：配置客户端秘钥（获取<code>access_token</code>时携带的<code>Basic Auth</code>的密码），该参数默认值为<code>ApiBootSecret</code></li>\n</ul>\n<h3>2.2 设置ResourceID</h3>\n<p><code>resource-id</code>是授权访问的资源编号，默认值为<code>api</code>，如需修改如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    oauth:</span>\n<span class=\"hljs-attr\">      resource-id:</span> <span class=\"hljs-string\">api</span>\n</code></pre>\n<h3>2.3 设置客户端的授权方式（GrantType）</h3>\n<p><code>GrantType</code>授权方式的配置，对应着客户端所拥有的权限，如：<code>password</code>对应着使用<code>用户名、密码</code>方式获取<code>access_token</code>，<code>refresh_token</code>则对应<code>access_token</code>过期后使用刷新的方式获取新的<code>access_token</code>，配置如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    oauth:</span>\n<span class=\"hljs-attr\">      grant-types:</span> <span class=\"hljs-string\">password,refresh_token</span>\n</code></pre>\n<p><code>api.boot.oauth.grant-types</code>配置默认值为：<code>password,refresh_token</code>，如果需要新增授权方式，配置多个使用<code>,</code>号隔开。</p>\n<h3>2.4 设置客户端的作用域（Scope）</h3>\n<p><code>Scope</code>是配置客户端所授权的作用域，可以通过该配置进行权限检验，具体详细去了解<code>Spring Security + OAuth2</code>的注解使用，配置如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    oauth:</span>\n<span class=\"hljs-attr\">      scopes:</span> <span class=\"hljs-string\">api,admin</span>\n</code></pre>\n<p><code>api.boot.oauth.scopes</code>参数默认值为<code>api</code>，多个使用<code>,</code>号隔开，<strong>至少需要配置一个</strong>。</p>\n<h2>3. JDBC方式</h2>\n<p><code>ApiBoot OAuth</code>支持使用<code>JDBC</code>方式将生成的<code>AccessToken</code>存放到数据库，以及在数据库内进行配置客户端的相关信息，比如：<code>client_id</code>、<code>client_secret</code>、<code>grant_type</code>、<code>scopes</code>等。\n我们如果需要使用<code>ApiBoot OAuth</code>的<code>JDBC</code>方式来实现，需要遵循<code>OAuth2</code>的建表<code>SQL</code>在需要的数据库内执行创建表结构，<code>MySQL</code>数据库对应的语句访问<a href=\"https://github.com/hengboy/api-boot/blob/master/api-boot-project/api-boot-starters/api-boot-starter-security-oauth-jwt/oauth-mysql.sql\">MySQL OAuth2 SQL</a>获取，开启<code>JDBC</code>方式修改<code>application.yml</code>配置如下：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    oauth:</span>\n<span class=\"hljs-attr\">      away:</span> <span class=\"hljs-string\">jdbc</span>\n</code></pre>\n<h3>3.1 配置客户端信息</h3>\n<p>在使用<code>OAuth2</code>时，<code>oauth_client_details</code>信息表用于配置客户端的基本信息，新增一条数据对应授权一个新的客户端可以进行安全认证，我们可以执行下面<code>SQL</code>创建一个新的客户端信息：</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> <span class=\"hljs-string\">`oauth_client_details`</span> <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">'ApiBoot'</span>,<span class=\"hljs-string\">'api'</span>,<span class=\"hljs-string\">'$2a$10$M5t8t1fHatAj949RCHHB/.j1mrNAbxIz.mOYJQbMCcSPwnBMJLmMK'</span>,<span class=\"hljs-string\">'api'</span>,<span class=\"hljs-string\">'password'</span>,<span class=\"hljs-literal\">NULL</span>,<span class=\"hljs-literal\">NULL</span>,<span class=\"hljs-number\">7200</span>,<span class=\"hljs-number\">7200</span>,<span class=\"hljs-literal\">NULL</span>,<span class=\"hljs-literal\">NULL</span>);\n</code></pre>\n<blockquote>\n<p>注意：<code>client_secret</code>列的数据必须通过<code>BCryptPasswordEncoder</code>进行加密，这里存储加密后的字符串。</p>\n</blockquote>\n<h3>3.2 设置ResourceID</h3>\n<p>修改<code>oauth_client_details</code>信息表内对应客户端的<code>resource_ids</code>列的数据内容即可，如果需要配置多个值时使用<code>英文半角逗号</code>隔开。</p>\n<h3>3.3 设置客户端的授权方式（GrantType）</h3>\n<p>修改<code>oauth_client_details</code>信息表内对应客户端的<code>authorized_grant_types</code>列的数据内容，如果需要配置多个授权方式同样使用<code>英文半角逗号</code>隔开。</p>\n<h3>3.4 设置客户端作用域（Scope）</h3>\n<p>修改<code>oauth_client_details</code>信息表内对应客户端的<code>scope</code>列的数据内容，如果需要配置多个授权方式同样使用<code>英文半角逗号</code>隔开。</p>\n<h2>4. Redis方式</h2>\n<p><code>ApiBoot OAuth</code>从<code>2.1.1.RELEASE</code>版本开始支持使用<code>Redis</code>进行存储<code>AccessToken</code>，提高获取<code>Token</code>的响应效率，开启<code>redis</code>方式修改<code>application.yml</code>配置如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    oauth:</span>\n<span class=\"hljs-attr\">      away:</span> <span class=\"hljs-string\">redis</span>\n</code></pre>\n<blockquote>\n<p>开启后我们还需要添加<code>Redis</code>的支持。</p>\n</blockquote>\n<h3>4.1 添加Redis支持</h3>\n<p><code>redis</code>的支持需要在<code>pom.xml</code>内添加<code>spring-boot-starter-data-redis</code>依赖，并且在<code>application.yml</code>文件内配置<code>redis</code>相关信息。</p>\n<h4>4.1.1 添加依赖</h4>\n<p>在<code>pom.xml</code>文件内添加依赖如下所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h4>4.1.2 配置redis</h4>\n<p>在<code>application.yml</code>文件内添加对<code>redis</code>的配置，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">spring:</span>\n<span class=\"hljs-attr\">  redis:</span>\n    <span class=\"hljs-comment\"># 密码根据你的配置填写</span>\n<span class=\"hljs-attr\">    password:</span> <span class=\"hljs-number\">123456</span>\n    <span class=\"hljs-comment\"># redis主机IP</span>\n<span class=\"hljs-attr\">    host:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>\n</code></pre>\n<h3>4.2 配置客户端信息</h3>\n<p><code>ApiBoot OAuth</code>从<code>2.1.1.RELEASE</code>版本开始支持<code>多客户端配置</code>，<code>redis</code>方式的配置与<code>memory</code>内存方式一致，在<code>application.yml</code>配置文件内对应配置客户端信息，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    oauth:</span>\n      <span class=\"hljs-comment\"># 开启使用redis存储token</span>\n<span class=\"hljs-attr\">      away:</span> <span class=\"hljs-string\">redis</span>\n      <span class=\"hljs-comment\"># 启用jwt</span>\n<span class=\"hljs-attr\">      jwt:</span>\n<span class=\"hljs-attr\">        enable:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-comment\"># 配置oauth2客户端列表</span>\n<span class=\"hljs-attr\">      clients:</span>\n<span class=\"hljs-attr\">        - client-id:</span> <span class=\"hljs-string\">admin</span>\n<span class=\"hljs-attr\">          client-secret:</span> <span class=\"hljs-string\">admin_secret</span>\n<span class=\"hljs-attr\">        - client-id:</span> <span class=\"hljs-string\">platform</span>\n<span class=\"hljs-attr\">          client-secret:</span> <span class=\"hljs-string\">platform_secret</span>\n</code></pre>\n<h2>5. 获取AccessToken</h2>\n<p>获取<code>access_token</code>是我们集成<code>ApiBoot OAuth</code>的必经之路，我们需要携带<code>access_token</code>去访问受保护的资源，下面提供了多种途径获取<code>access_token</code>，按需选择使用。</p>\n<h3>5.1 CURL方式</h3>\n<p>在<code>Mac</code>、<code>Linux</code>系统下可以直接通过<code>curl</code>命令行进行获取<code>access_token</code>，命令如下所示：</p>\n<pre><code class=\"language-sh\">~ curl ApiBoot:ApiBootSecret@localhost:8080/oauth/token -d <span class=\"hljs-string\">\"grant_type=password&amp;username=apiboot&amp;password=abc321\"</span>\n获取结果：\n{<span class=\"hljs-string\">\"access_token\"</span>:<span class=\"hljs-string\">\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsiYXBpIl0sInVzZXJfbmFtZSI6ImFwaWJvb3QiLCJzY29wZSI6WyJhcGkiXSwiZXhwIjoxNTYwNDQ2NDc5LCJhdXRob3JpdGllcyI6WyJST0xFX2FwaSJdLCJqdGkiOiI2ZmQ0ZDdiNi1kN2JkLTRiMmUtYmFlYi1iNGMwMmRlMjM0YmYiLCJjbGllbnRfaWQiOiJBcGlCb290In0.l_38N6gJbSug_uzJLope9uJQsA12BfJNDlGFmB-UQMU\"</span>,<span class=\"hljs-string\">\"token_type\"</span>:<span class=\"hljs-string\">\"bearer\"</span>,<span class=\"hljs-string\">\"refresh_token\"</span>:<span class=\"hljs-string\">\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsiYXBpIl0sInVzZXJfbmFtZSI6ImFwaWJvb3QiLCJzY29wZSI6WyJhcGkiXSwiYXRpIjoiNmZkNGQ3YjYtZDdiZC00YjJlLWJhZWItYjRjMDJkZTIzNGJmIiwiZXhwIjoxNTYyOTk1Mjc5LCJhdXRob3JpdGllcyI6WyJST0xFX2FwaSJdLCJqdGkiOiIxNmZhZThlNi00ZDM3LTQ1NTctOTZiYi1hMWQ4MjBkOTk2NTYiLCJjbGllbnRfaWQiOiJBcGlCb290In0.egICzqsReO0hxheUv2i7u-3vloo7kYf1-_JqMcSR240\"</span>,<span class=\"hljs-string\">\"expires_in\"</span>:42378,<span class=\"hljs-string\">\"scope\"</span>:<span class=\"hljs-string\">\"api\"</span>,<span class=\"hljs-string\">\"jti\"</span>:<span class=\"hljs-string\">\"6fd4d7b6-d7bd-4b2e-baeb-b4c02de234bf\"</span>}\n</code></pre>\n<p>根据上面的<code>curl</code>命令，各个组成部分值解释：</p>\n<ul>\n<li><code>ApiBoot</code>：客户端编号，取决于<code>client_id</code>配置的值</li>\n<li><code>ApiBootSecret</code>，客户端秘钥，取决于<code>client_secret</code>配置的值</li>\n<li><code>grant_type=password</code>：授权方式，取决于配置的授权方式。</li>\n<li><code>apiboot</code>：当<code>grant_type=password</code>时传递的<code>ApiBoot Security</code>配置的用户名（<code>username</code>）</li>\n<li><code>abc123</code>：当<code>grant_type=password</code>时传递的<code>ApiBoot Security</code>配置的密码（<code>password</code>）</li>\n</ul>\n<h3>5.2 PostMan方式</h3>\n<p><img src=\"/img/postman-access-token.png\" alt=\"PostMan获取AccessToken\"></p>\n<blockquote>\n<p>注意：</p>\n<ol>\n<li>获取<code>access_token</code>的请求方式是<code>POST</code>。</li>\n<li>使用<code>Basic</code>方式认证客户端信息</li>\n<li>不要混淆客户端的clientId、clientSecret与用户的username、password的概念。</li>\n</ol>\n</blockquote>\n<h3>5.3 RestTemplate方式</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 获取Token请求路径</span>\nString access_token_uri = <span class=\"hljs-string\">\"http://localhost:8080/oauth/token?grant_type=password&amp;username=apiboot&amp;password=abc321\"</span>;\n<span class=\"hljs-comment\">// 客户端Id</span>\nString clientId = <span class=\"hljs-string\">\"ApiBoot\"</span>;\n<span class=\"hljs-comment\">// 客户端Secret</span>\nString clientSecret = <span class=\"hljs-string\">\"ApiBootSecret\"</span>;\n<span class=\"hljs-comment\">// basic认证的格式</span>\nString basicAuth = <span class=\"hljs-string\">\"Basic %s\"</span>;\n\n<span class=\"hljs-comment\">// 可以使用注入RestTemplate方式获取对象实例</span>\nRestTemplate restTemplate = <span class=\"hljs-keyword\">new</span> RestTemplate();\n<span class=\"hljs-comment\">// 请求头</span>\nHttpHeaders headers = <span class=\"hljs-keyword\">new</span> HttpHeaders();\n<span class=\"hljs-comment\">// 设置客户端的basic认证信息</span>\nheaders.set(<span class=\"hljs-string\">\"Authorization\"</span>, String.format(basicAuth, Base64Utils.encodeToString((clientId + <span class=\"hljs-string\">\":\"</span> + clientSecret).getBytes())));\n<span class=\"hljs-comment\">// 请求主体</span>\nHttpEntity&lt;String&gt; httpEntity = <span class=\"hljs-keyword\">new</span> HttpEntity&lt;&gt;(headers);\n<span class=\"hljs-comment\">// 发送请求，获取access_token</span>\nString access_token = restTemplate.postForObject(access_token_uri, httpEntity, String.class);\n\nSystem.out.println(access_token);\n</code></pre>\n<h2>6. 自定义授权方式（GrantType）</h2>\n<p><code>OAuth2</code>内部提供了一些内置的<code>grant_type</code>，根据业务需求有时需要自定义，比如：<code>手机号验证码登录</code>、<code>第三方微信登录</code>等，针对这种场景<code>ApiBoot OAuth</code>提供了自定义授权的方式，我们需要通过\n实现接口<code>ApiBootOauthTokenGranter</code>来完成自定义授权的业务编写。</p>\n<h3>6.1 了解OAuth2内置的GrantType</h3>\n<p>以下是集成<code>OAuth2</code>常用的几种授权方式：</p>\n<ul>\n<li><code>password</code>：用户名密码方式</li>\n<li><code>refresh_token</code>：刷新<code>access_token</code></li>\n<li><code>authorization_code</code>：授权码方式</li>\n<li><code>client_credentials</code>：客户端方式</li>\n</ul>\n<h3>6.2 了解ApiBootOauthTokenGranter接口</h3>\n<p><code>ApiBootOauthTokenGranter</code>接口是<code>ApiBoot OAuth</code>提供的自定义授权方式的定义。</p>\n<h4>6.2.1 grantType方法</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n* oauth2 grant type for ApiBoot\n*\n* <span class=\"hljs-doctag\">@return</span> grant type\n*/</span>\n<span class=\"hljs-function\">String <span class=\"hljs-title\">grantType</span><span class=\"hljs-params\">()</span></span>;\n</code></pre>\n<p>该方法返回自定义授权方式，如该方法返回<code>phone_code</code>，对应在获取<code>access_token</code>时使用<code>/oauth/token?grant_type=phone_code</code>。</p>\n<h4>6.2.2 loadByParameter方法</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n* load userDetails by parameter\n*\n* <span class=\"hljs-doctag\">@param</span> parameters parameter map\n* <span class=\"hljs-doctag\">@return</span> UserDetails\n* <span class=\"hljs-doctag\">@throws</span> ApiBootTokenException\n* <span class=\"hljs-doctag\">@see</span> UserDetails\n*/</span>\n<span class=\"hljs-function\">UserDetails <span class=\"hljs-title\">loadByParameter</span><span class=\"hljs-params\">(Map&lt;String, String&gt; parameters)</span> <span class=\"hljs-keyword\">throws</span> ApiBootTokenException</span>;\n</code></pre>\n<p><code>loadByParameter</code>方法的参数是一个请求参数的集合，是在发起获取<code>access_token</code>时所携带的参数列表，我们拿到参数后可以进行数据校验，校验通过后返回实现<code>UserDetails</code>接口的具体类型实例。</p>\n<h3>6.3 自定义授权方式</h3>\n<p>在上面简单介绍了<code>ApiBootOauthTokenGranter</code>接口，下面提供一个短信验证码登录的示例。</p>\n<h4>6.3.1 短信验证码方式登录示例</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * 短信验证码登录示例\n *\n * <span class=\"hljs-doctag\">@author</span> 恒宇少年 - 于起宇\n * &lt;p&gt;\n * DateTime：2019-06-06 09:15\n * Blog：https://blog.yuqiyu.com\n * WebSite：http://www.jianshu.com/u/092df3f77bca\n * Gitee：https://gitee.com/hengboy\n * GitHub：https://github.com/hengboy\n */</span>\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PhoneCodeOauthTokenGranter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ApiBootOauthTokenGranter</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * logger instance\n     */</span>\n    <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(PhoneCodeOauthTokenGranter.class);\n    <span class=\"hljs-comment\">/**\n     * 获取Token时使用grant_type=phone_code授权方式\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String GRANT_TYPE = <span class=\"hljs-string\">\"phone_code\"</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 参数：手机号\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String PARAM_PHONE = <span class=\"hljs-string\">\"phone\"</span>;\n    <span class=\"hljs-comment\">/**\n     * 参数：验证码\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String PARAM_CODE = <span class=\"hljs-string\">\"code\"</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">grantType</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> GRANT_TYPE;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 该方法参数集合是获取Token时携带的参数\n     * 获取Token路径：/oauth/token?grant_type=phone_code&amp;phone=171xxxxx&amp;code=196523\n     * phone=171xxxxx\n     * code=196523\n     *\n     * <span class=\"hljs-doctag\">@param</span> parameters parameter map\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> ApiBootTokenException\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserDetails <span class=\"hljs-title\">loadByParameter</span><span class=\"hljs-params\">(Map&lt;String, String&gt; parameters)</span> <span class=\"hljs-keyword\">throws</span> ApiBootTokenException </span>{\n        String phone = parameters.get(PARAM_PHONE);\n        String code = parameters.get(PARAM_CODE);\n\n        logger.debug(<span class=\"hljs-string\">\"手机号：{}\"</span>, phone);\n        logger.debug(<span class=\"hljs-string\">\"验证码：{}\"</span>, code);\n\n        <span class=\"hljs-comment\">// 自定义数据逻辑校验验证码是否正确、是否与该手机号匹配等</span>\n        <span class=\"hljs-comment\">// 校验通过后返回实现SpringSecurity提供的UserDetails接口的数据实体即可</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> UserDetails() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPassword</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUsername</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-keyword\">return</span> phone;\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isAccountNonExpired</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isAccountNonLocked</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isCredentialsNonExpired</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEnabled</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n            }\n        };\n    }\n}\n</code></pre>\n<h4>6.3.2 配置客户端支持自定义授权方式</h4>\n<p>在上面我们定义短信验证码方式的授权，我们需要让客户端支持该授权方式，内存方式参考本章文档[2.3]，JDBC方式参考本章文档[3.3]</p>\n<h4>6.3.3 获取自定义授权方式AccessToken</h4>\n<p><code>ApiBoot OAuth</code>修改了<code>Oauth2</code>内部有关授权的源码方式进行实现，所以获取<code>Token</code>跟内置的授权方式没有区别，只不过是<code>grant_type</code>参数有所变动，针对上面<code>自定义短信验证码登录</code>的授权方式获取<code>Token</code>如下所示：</p>\n<pre><code class=\"language-sh\">curl ApiBoot:ApiBootSecret@localhost:8080/oauth/token -d <span class=\"hljs-string\">\"grant_type=phone_code&amp;phone=171xxxx&amp;code=026492\"</span>\n</code></pre>\n<p>本次获取<code>access_token</code>的所有参数都会传递给<code>ApiBootOauthTokenGranter#loadByParameter</code>方法的参数集合内。</p>\n<h2>7. 使用JWT格式化AccessToken</h2>\n<p>使用<code>JWT</code>格式化<code>access_token</code>是一个很常见的需求，因此<code>ApiBoot OAuth</code>内部针对<code>JWT</code>进行了支持，通过简单的配置参数就可以使用<code>JWT</code>对<code>access_token</code>进行格式化。</p>\n<h3>7.1 配置JWT秘钥</h3>\n<p><code>JWT</code>内部使用<code>RSA</code>方式进行加密，加密时需要使用<code>秘钥Key</code>，<code>ApiBoot Security Oauth</code>内部默认使用<code>ApiBoot</code>作为<code>秘钥Key</code>，如果需要修改我们可以通过<code>api.boot.oauth.jwt.sign-key</code>参数进行设置，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    oauth:</span>\n<span class=\"hljs-attr\">      away:</span> <span class=\"hljs-string\">jdbc</span>\n<span class=\"hljs-attr\">      jwt:</span>\n        <span class=\"hljs-comment\"># 转换Jwt时所需加密key，默认为ApiBoot</span>\n<span class=\"hljs-attr\">        sign-key:</span> <span class=\"hljs-string\">恒宇少年</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">于起宇</span>\n</code></pre>\n<h3>7.2 开启JWT</h3>\n<p>在<code>ApiBoot Security Oauth</code>内默认集成了<code>JWT</code>格式化<code>Oauth Access Token</code>的转换方式，但是并未启用，需要通过<code>api.boot.oauth.jwt.enable</code>来开启<code>JWT</code>，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    oauth:</span>\n<span class=\"hljs-attr\">      away:</span> <span class=\"hljs-string\">jdbc</span>\n<span class=\"hljs-attr\">      jwt:</span>\n        <span class=\"hljs-comment\"># 开启Jwt转换AccessToken</span>\n<span class=\"hljs-attr\">        enable:</span> <span class=\"hljs-literal\">true</span>\n</code></pre>\n",
  "link": "/zh-cn/docs/api-boot-oauth.html",
  "meta": {
    "title": "ApiBoot OAuth 使用文档"
  }
}