{
  "filename": "api-boot-mybatis-enhance.md",
  "__html": "<h1>ApiBoot 整合 持久化框架 Mybatis Enhance</h1>\n<p><code>Enhance</code>是对于原生的<code>MyBatis</code>的增强编写，不影响任何原生的使用，使用后完全替代<code>mybatis-core</code>、<code>mybatis-spring</code>以及<code>mybatis-spring-boot-starter</code>，可以使用<code>SpringBoot</code>配置文件的形式进行配置相关的内容，尽可能强大的方便快速的集成<code>MyBatis</code>。</p>\n<ul>\n<li>增强CRUD</li>\n</ul>\n<p><code>Mybatis Enhance</code>提供了<code>单表基础数据</code>的<code>CRUD</code>操作以及部分<code>批量数据</code>的操作，可以不再使用<code>MyBatis</code>提供的自动生成的方式对单个数据表进行数据操作，当然如果你想使用也是可以的。</p>\n<ul>\n<li>动态查询、更新、删除</li>\n</ul>\n<p><code>Mybatis Enhance</code>还规划了多个数据表之间的动态查询方式，这种方式可以让你体验到你在使用<code>Java代码</code>编写<code>SQL语句</code>，极大方便的关联、聚合、多表查询字段等常用数据动作。</p>\n<h2>添加依赖</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Mybatis Enhance--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-mybatis-enhance<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>如果对<code>ApiBoot</code>使用不了解，可查看<a href=\"/docs/quick-start.html\">快速接入ApiBoot</a></p>\n</blockquote>\n<h2>该怎么使用呢？</h2>\n<h3>实体的创建</h3>\n<p>根据对应数据库内的表来创建实体，<code>Enhance</code>采用的是<code>Spring Data JPA</code>的形式来管理实体类，并且已经预先提供的一些<code>Annotation</code>，<code>数据实体(Entity)</code>对应数据库内的<code>数据表(Table)</code>，下面是一个简单的实体代码：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * 用户数据实体\n *\n * <span class=\"hljs-doctag\">@author</span>：于起宇 &lt;br/&gt;\n * ===============================\n * Created with IDEA.\n * Date：2018/5/13\n * Time：8:53\n * 简书：http://www.jianshu.com/u/092df3f77bca\n * ================================\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@Table</span>(name = <span class=\"hljs-string\">\"test_user_info\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserInfoEntity</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * 用户编号\n     */</span>\n    <span class=\"hljs-meta\">@Id</span>(generatorType = KeyGeneratorTypeEnum.AUTO)\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"TUI_ID\"</span>)\n    <span class=\"hljs-keyword\">private</span> Integer userId;\n    <span class=\"hljs-comment\">/**\n     * 用户名\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"TUI_NAME\"</span>)\n    <span class=\"hljs-keyword\">private</span> String userName;\n    <span class=\"hljs-comment\">/**\n     * 年龄\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"tui_age\"</span>)\n    <span class=\"hljs-keyword\">private</span> Integer age;\n    <span class=\"hljs-comment\">/**\n     * 地址\n     */</span>\n    <span class=\"hljs-meta\">@Column</span>(name = <span class=\"hljs-string\">\"tui_address\"</span>)\n    <span class=\"hljs-keyword\">private</span> String address;\n}\n</code></pre>\n<p>我采用了跟<code>Spring Data JPA</code>相同命名方式的注解，这样也方便大家在使用<code>Enhance</code>时可以快速的转换注解的使用。</p>\n<h3>Mapper的创建</h3>\n<p>创建<code>Mapper</code>跟我们使用原生<code>MyBatis</code>创建方式一样，不过使用<code>Enhance</code>后不需要添加<code>@Mapper</code>注解，你创建的<code>Mapper</code>只需要继承<code>EnhanceMapper&lt;T,PK&gt;</code>接口就可以被扫描到，并且同时可以获取内部提供的<code>CRUD</code>方法！！！\n如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * 用户基本信息数据接口\n *\n * <span class=\"hljs-doctag\">@author</span>：于起宇 &lt;br/&gt;\n * ===============================\n * Created with IDEA.\n * Date：2018/5/13\n * Time：9:00\n * 简书：http://www.jianshu.com/u/092df3f77bca\n * ================================\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserInfoMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">EnhanceMapper</span>&lt;<span class=\"hljs-title\">UserInfoEntity</span>, <span class=\"hljs-title\">Integer</span>&gt; </span>{\n}\n</code></pre>\n<p><code>EnhanceMapper</code>需要两个泛型，第一个是实体类的类型，第二个则是实体类主键的类型，这样方便我们在传参或者返回值时做到统一，否则还需要进行<code>Object</code>类型的转换，那样不仅麻烦还会提高运行成本。</p>\n<h3>暂时内置的方法</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 统计数据</span>\n<span class=\"hljs-function\">Long <span class=\"hljs-title\">countAll</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 清空数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteAll</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键数组删除指定数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteArray</span><span class=\"hljs-params\">(Id... ids)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据自定义sql删除数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteBySql</span><span class=\"hljs-params\">(String sql, Map&lt;String, Object&gt; params)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键集合删除指定数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteCollection</span><span class=\"hljs-params\">(Collection&lt;Id&gt; collection)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 删除一条数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteOne</span><span class=\"hljs-params\">(Id id)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 数据保存</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(T t)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 保存数组内的所有数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertArray</span><span class=\"hljs-params\">(T... array)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 保存集合内的所有数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insertCollection</span><span class=\"hljs-params\">(Collection&lt;T&gt; collection)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 查询全部数据</span>\n<span class=\"hljs-function\">List&lt;T&gt; <span class=\"hljs-title\">selectAll</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键数组查询指定数据</span>\n<span class=\"hljs-function\">List&lt;T&gt; <span class=\"hljs-title\">selectArray</span><span class=\"hljs-params\">(Id... ids)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 分页查询数据</span>\n<span class=\"hljs-function\">List&lt;T&gt; <span class=\"hljs-title\">selectByPageable</span><span class=\"hljs-params\">(Pageable pageable)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 自定义sql查询数据</span>\n<span class=\"hljs-function\">List&lt;Map&gt; <span class=\"hljs-title\">selectBySql</span><span class=\"hljs-params\">(String sql, Map&lt;String, Object&gt; params)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键集合查询指定数据</span>\n<span class=\"hljs-function\">List&lt;T&gt; <span class=\"hljs-title\">selectCollection</span><span class=\"hljs-params\">(Collection&lt;Id&gt; ids)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键查询单条数据</span>\n<span class=\"hljs-function\">T <span class=\"hljs-title\">selectOne</span><span class=\"hljs-params\">(Id id)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 根据主键更新数据实体</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(T t)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n<span class=\"hljs-comment\">// 自定义sql更新数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateBySql</span><span class=\"hljs-params\">(String sql, Map&lt;String, Object&gt; params)</span> <span class=\"hljs-keyword\">throws</span> EnhanceFrameworkException</span>;\n</code></pre>\n<p>以上是<code>1.0.3.RELEASE</code>版本提供的内置方法列表，都是在平时开发中比较常用到对单表数据操作的方法。</p>\n<h3>方法命名规则的使用</h3>\n<p><code>方法命名规则</code>是<code>Spring Data JPA</code>中的提供的一种数据操作的方式，主要适用于<code>查询</code>、<code>统计</code>、<code>删除</code>等数据操作动作，其主要原理是根据方法的名称来自动生成<code>SQL</code>，使用正则表达式来进行方法匹配。</p>\n<h3>方法规则查询</h3>\n<p>方法规则查询简单示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserInfoMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">EnhanceMapper</span>&lt;<span class=\"hljs-title\">UserInfoEntity</span>, <span class=\"hljs-title\">Integer</span>&gt; </span>{\n    <span class=\"hljs-comment\">/**\n     * 只根据一个字段查询\n     * findBy userName\n     * <span class=\"hljs-doctag\">@param</span> name 查询条件的值\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">UserInfoEntity <span class=\"hljs-title\">findByUserName</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"userName\"</span>)</span> String name)</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 可以根据多个查询条件进行查询\n     * 中间使用And进行连接\n     * findBy userName and age\n     * <span class=\"hljs-doctag\">@param</span> name 第一个查询条件的值\n     * <span class=\"hljs-doctag\">@param</span> age  第二个查询条件的值\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">UserInfoEntity <span class=\"hljs-title\">findByUserNameAndAge</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"userName\"</span>)</span> String name, @<span class=\"hljs-title\">Param</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"age\"</span>)</span> Integer age)</span>;\n}\n</code></pre>\n<h3>方法规则统计</h3>\n<p>方法规则统计简单示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserInfoMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">EnhanceMapper</span>&lt;<span class=\"hljs-title\">UserInfoEntity</span>, <span class=\"hljs-title\">Integer</span>&gt; </span>{\n    <span class=\"hljs-comment\">/**\n     * 只根据一个字段统计数据\n     * 语法分析：countBy userName\n     * <span class=\"hljs-doctag\">@param</span> name 统计条件的值\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">Long <span class=\"hljs-title\">countByUserName</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"userName\"</span>)</span> String name)</span>;\n    <span class=\"hljs-comment\">/**\n     * 根据多个条件进行统计数据\n     * 语法分析：countBy userName and age\n     * <span class=\"hljs-doctag\">@param</span> name 第一个统计条件的值\n     * <span class=\"hljs-doctag\">@param</span> age  第二个统计条件的值\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">Long <span class=\"hljs-title\">countByUserNameAndAge</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"userName\"</span>)</span> String name, @<span class=\"hljs-title\">Param</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"age\"</span>)</span> Integer age)</span>;\n}    \n</code></pre>\n<h3>方法规则删除</h3>\n<p>方法规则删除简单示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserInfoMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">EnhanceMapper</span>&lt;<span class=\"hljs-title\">UserInfoEntity</span>, <span class=\"hljs-title\">Integer</span>&gt; </span>{\n    <span class=\"hljs-comment\">/**\n     * 只根据一个字段删除\n     * 语法分析：removeBy userName\n     * <span class=\"hljs-doctag\">@param</span> name 查询条件的值\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeByUserName</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"userName\"</span>)</span> String name)</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 根据多个条件进行删除数据\n     * 中间使用And进行连接\n     * 语法分析：removeBy userName and userId\n     * <span class=\"hljs-doctag\">@param</span> name 第一个删除条件的值\n     * <span class=\"hljs-doctag\">@param</span> id   第二个删除条件的值\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeByUserNameAndUserId</span><span class=\"hljs-params\">(@Param(<span class=\"hljs-string\">\"userName\"</span>)</span> String name, @<span class=\"hljs-title\">Param</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"userId\"</span>)</span> String id)</span>;\n}   \n</code></pre>\n<h2>动态查询</h2>\n<p><code>Mybatis Enhance</code>支持动态查询，可以将返回结果映射到任何可对应的类型内，比如：基础数据类型、集合、实体类等，编写动态查询时与<code>SQL</code>语法几乎一致。</p>\n<p>如下简单示例：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * Mybatis Enhance Dsl Factory\n  */</span>\n<span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> EnhanceDslFactory dslFactory;\n\n<span class=\"hljs-comment\">/**\n  * 示例：动态条件查询用户信息\n  *\n  * <span class=\"hljs-doctag\">@param</span> userId 用户编号\n  * <span class=\"hljs-doctag\">@return</span> 用户基本信息\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserEntity <span class=\"hljs-title\">dynamicSelectOne</span><span class=\"hljs-params\">(String userId)</span> </span>{\n\n  DUserEntity dUserEntity = DUserEntity.DSL();\n\n  <span class=\"hljs-keyword\">return</span> dslFactory.createSearchable()\n    .selectFrom(dUserEntity)\n    .where(dUserEntity.uiId.eq(userId))\n    .resultType(UserEntity.class)\n    .fetchOne();\n}\n</code></pre>\n<blockquote>\n<p>在上面示例中，<code>DUserEntity</code>是<code>MybatisEnhance</code>所需要的动态查询实体，该实体会由专门的代码生成工具生成。</p>\n</blockquote>\n<h3>动态实体</h3>\n<p><code>DUserEntity</code>实体类内容如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DUserEntity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">TableExpression</span>&lt;<span class=\"hljs-title\">UserEntity</span>&gt; </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DUserEntity</span><span class=\"hljs-params\">(String root)</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(root);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> DUserEntity <span class=\"hljs-title\">DSL</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DUserEntity(<span class=\"hljs-string\">\"local_user_info\"</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> ColumnExpression uiId = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"ui_id\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-keyword\">public</span> ColumnExpression uiPhone = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"ui_phone\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-keyword\">public</span> ColumnExpression uiPassword = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"ui_password\"</span>, <span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-keyword\">public</span> ColumnExpression uiStatus = <span class=\"hljs-keyword\">new</span> ColumnExpression(<span class=\"hljs-string\">\"ui_status\"</span>, <span class=\"hljs-keyword\">this</span>);\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> ColumnExpression[] getColumns() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ColumnExpression[]{\n                uiId,\n                uiPhone,\n                uiPassword,\n                uiStatus\n        };\n    }\n}\n</code></pre>\n<h2>动态更新</h2>\n<p><code>Mybatis Enhance</code>支持动态更新，可以根据条件进行更新任意一个、多个字段，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * 示例：动态更新手机号\n  *\n  * <span class=\"hljs-doctag\">@param</span> userId 用户编号\n  * <span class=\"hljs-doctag\">@param</span> phone  手机号码\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dynamicUpdateAge</span><span class=\"hljs-params\">(String userId, String phone)</span> </span>{\n  DUserEntity dUserEntity = DUserEntity.DSL();\n  dslFactory.createUpdateable()\n    .update(dUserEntity)\n    .set(SetFilter.set(dUserEntity.uiPhone, phone))\n    .where(dUserEntity.uiId.eq(userId))\n    .execute();\n}\n</code></pre>\n<p>动态更新时的条件可以是一个、也可以是多个，多个可以使用<code>and</code>、<code>or</code>进行连接。</p>\n<h2>动态删除</h2>\n<p><code>Mybatis Enhance</code>支持动态删除，可以根据单个、多个条件进行筛选删除，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * 实例：动态根据手机号删除\n  *\n  * <span class=\"hljs-doctag\">@param</span> phone 手机号\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dynamicDeleteAge</span><span class=\"hljs-params\">(String phone)</span> </span>{\n  DUserEntity dUserEntity = DUserEntity.DSL();\n  dslFactory.createDeleteable()\n    .delete(dUserEntity)\n    .where(dUserEntity.uiPhone.eq(phone))\n    .execute();\n}\n</code></pre>\n<h2>多条件 And</h2>\n<p><code>Mybatis Enhance</code>支持动态组装查询条件，比如我现在根据用户名、手机号进行定位删除用户，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * 实例：动态根据手机号、用户编号删除\n  *\n  * <span class=\"hljs-doctag\">@param</span> userId 用户编号\n  * <span class=\"hljs-doctag\">@param</span> phone  手机号\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dynamicDeleteUser</span><span class=\"hljs-params\">(String userId, String phone)</span> </span>{\n  DUserEntity dUserEntity = DUserEntity.DSL();\n  dslFactory.createDeleteable()\n    .delete(dUserEntity)\n    <span class=\"hljs-comment\">// 手机号条件</span>\n    .where(dUserEntity.uiPhone.eq(phone))\n    <span class=\"hljs-comment\">// and 用户编号</span>\n    .and(dUserEntity.uiId.eq(userId))\n    .execute();\n}\n</code></pre>\n",
  "link": "/zh-cn/docs/api-boot-mybatis-enhance.html",
  "meta": {
    "title": "ApiBoot Mybatis Enhance 使用文档"
  }
}