{
  "filename": "api-boot-message-push.md",
  "__html": "<h1>ApiBoot 集成极光App消息推送</h1>\n<p><code>消息推送</code>是接口服务项目内不可或缺的一部分，用于向用户发送操作消息提醒、广告等。</p>\n<p><code>ApiBoot</code>内提供了<code>消息推送</code>的支持，目前集成的第三方组件为<code>极光推送</code>，<code>ApiBoot</code>遵循开箱即用的原则，所以在集成推送时仍然只需要简单的必要配置即可完成集成。</p>\n<h2>添加依赖</h2>\n<p>在<code>pom.xml</code>配置文件添加依赖如下所示：</p>\n<pre><code class=\"language-xml\">//...\n  <span class=\"hljs-comment\">&lt;!--ApiBoot Message Push Starter--&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-message-push<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n//...\n</code></pre>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<h2>相关配置</h2>\n<table>\n<thead>\n<tr>\n<th>配置名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>api.boot.push.production</code></td>\n<td><code>true</code></td>\n<td>配置IOS平台的推送环境，true：生产环境(AppStore下载的APP)</td>\n</tr>\n<tr>\n<td><code>api.boot.push.client.master-secret</code></td>\n<td></td>\n<td>单客户端推送配置masterSecret</td>\n</tr>\n<tr>\n<td><code>api.boot.push.client.app-key</code></td>\n<td></td>\n<td>单客户端推送配置appKey</td>\n</tr>\n<tr>\n<td><code>api.boot.push.multiple.xxx.master-secret</code></td>\n<td></td>\n<td>多客户端推送配置masterSecret</td>\n</tr>\n<tr>\n<td><code>api.boot.push.multiple.xxx.app-key</code></td>\n<td></td>\n<td>多客户端推送配置appKey</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>在上面<code>multiple</code>相关的配置内部是key-&gt;value结构配置，其中&quot;xxx&quot;用于配置@MessagePushSwitch(&quot;xxx&quot;)的value值</p>\n</blockquote>\n<h2>单环境推送</h2>\n<p>如果你的接口服务项目只集成推送到一个APP客户端，那么可以采用<code>单环境推送</code>的模式，该环境使用<code>api.boot.push.client</code>前缀的配置进行配置极光推送的两个秘钥，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-comment\"># ApiBoot Config</span>\n<span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    push:</span>\n      <span class=\"hljs-comment\"># 推送默认配置</span>\n<span class=\"hljs-attr\">      client:</span>\n        <span class=\"hljs-comment\"># 秘钥</span>\n<span class=\"hljs-attr\">        master-secret:</span> <span class=\"hljs-string\">xxx</span>\n        <span class=\"hljs-comment\"># appKey</span>\n<span class=\"hljs-attr\">        app-key:</span> <span class=\"hljs-string\">xxx</span>\n</code></pre>\n<p>配置完成后我们就可以通过注入<code>ApiBootMessagePushService</code>接口来进行发送推送业务，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * ApiBoot Message Push Service\n */</span>\n<span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> ApiBootMessagePushService apiBootMessagePushService;\n\n<span class=\"hljs-comment\">/**\n  * 安卓推送示例\n  * <span class=\"hljs-doctag\">@see</span> org.minbox.framework.api.boot.plugin.message.push.model.PushClientConfig\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n  apiBootMessagePushService.executePush(\n    MessagePushBody.builder()\n    <span class=\"hljs-comment\">// 推送安卓平台</span>\n    <span class=\"hljs-comment\">// 如需更换推送平台，可以查看PusherPlatform枚举定义</span>\n    .platform(PusherPlatform.ANDROID)\n    <span class=\"hljs-comment\">// 标题</span>\n    .title(<span class=\"hljs-string\">\"消息推送\"</span>)\n    <span class=\"hljs-comment\">// 内容</span>\n    .message(<span class=\"hljs-string\">\"测试消息推送内容\"</span>)\n    <span class=\"hljs-comment\">// 接收人的别名(App端开发人员进行设置)</span>\n    .alias(Arrays.asList(<span class=\"hljs-string\">\"xxxx\"</span>))\n    .build()\n  );\n}\n</code></pre>\n<blockquote>\n<p><code>ApiBoot Message Push</code>如不配置使用<code>@MessagePushSwithc</code>注解时，使用默认的配置，也就是<code>api.boot.push.client</code>开头的相关配置信息。</p>\n</blockquote>\n<h2>多环境推送</h2>\n<p>在一个接口服务系统内，可能存在向多个APP客户端进行推送消息，那么这种情况<code>ApiBoot Message Push</code>也做了支持，内部通过<code>AOP</code>的方法切面进行处理。</p>\n<p>多环境下的配置要做修改，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-comment\"># ApiBoot Config</span>\n<span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    push:</span>\n<span class=\"hljs-attr\">      multiple:</span>\n        <span class=\"hljs-comment\"># user app 推送配置</span>\n<span class=\"hljs-attr\">        user:</span>\n<span class=\"hljs-attr\">          master-secret:</span> <span class=\"hljs-string\">xxx</span>\n<span class=\"hljs-attr\">          app-key:</span> <span class=\"hljs-string\">xxxx</span>\n        <span class=\"hljs-comment\"># other app 推送配置</span>\n<span class=\"hljs-attr\">        other:</span>\n<span class=\"hljs-attr\">          master-secret:</span> <span class=\"hljs-string\">xxxxxx</span>\n<span class=\"hljs-attr\">          app-key:</span> <span class=\"hljs-string\">xxxxxx</span>\n</code></pre>\n<p>在上面我们配置了两个APP客户端的推送信息，名称分别为<code>user</code>、<code>other</code>，这个名称对应<code>@MessagePushSwitch</code>注解的<code>value</code>值使用。</p>\n<p>在上面配置了<code>user</code>、<code>other</code>两个客户端，使用具体的环境我们只需要在调用方法上添加<code>@MessagePushSwitch</code>注解，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// other app 推送</span>\n<span class=\"hljs-meta\">@MessagePushSwitch</span>(<span class=\"hljs-string\">\"other\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testOther</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">//....</span>\n}\n\n<span class=\"hljs-comment\">// user app 推送</span>\n<span class=\"hljs-meta\">@MessagePushSwitch</span>(<span class=\"hljs-string\">\"user\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testUser</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">//....</span>\n}\n</code></pre>\n<h2>指定别名推送</h2>\n<p>在推送消息时，<code>ApiBoot</code>提供了多种方式，其中可以根据<code>alias</code>别名进行推送，<code>alias</code>是由<code>App</code>前端开发人员在集成<code>SDK</code>时设置的值，这时就需要接口开发人员与APP开发人员的约定来完成推送逻辑，一般可以使用用户的编号来作为别名，根据别名推送如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 别名推送示例</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n  apiBootMessagePushService.executePush(\n    MessagePushBody.builder()\n    .platform(PusherPlatform.ANDROID)\n    .title(<span class=\"hljs-string\">\"消息推送\"</span>)\n    .message(<span class=\"hljs-string\">\"测试消息推送内容\"</span>)\n    <span class=\"hljs-comment\">// 配置别名，别名可配置多个</span>\n    .alias(Arrays.asList(<span class=\"hljs-string\">\"xxxx\"</span>))\n    .build()\n  );\n}\n</code></pre>\n<h2>指定分组推送</h2>\n<p>分组推送跟别名推送几乎一致，也是APP开发人员在调用<code>SDK</code>时对具体的用户划分的一个分组群体，向分组进行推送消息时，分组内的所有用户都可以收到。</p>\n<p>如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 分组推送示例</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n  apiBootMessagePushService.executePush(\n    MessagePushBody.builder()\n    .platform(PusherPlatform.ANDROID)\n    .title(<span class=\"hljs-string\">\"消息推送\"</span>)\n    .message(<span class=\"hljs-string\">\"测试消息推送内容\"</span>)\n    <span class=\"hljs-comment\">// 推送group1内的所有用户</span>\n    <span class=\"hljs-comment\">// 注意：分组优先级低于别名</span>\n    .tags(Arrays.asList(<span class=\"hljs-string\">\"group1\"</span>))\n    .build()\n  );\n}\n</code></pre>\n<blockquote>\n<p>如果同时配置别名、分组两种推送方式，则会使用别名</p>\n</blockquote>\n<h2>携带自定义参数推送</h2>\n<p><code>ApiBoot Message Push</code>可以给APP端推送的消息携带自定义的扩展参数，让APP端做一些特殊的处理，携带扩展参数如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 自定义参数示例</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n  apiBootMessagePushService.executePush(\n    MessagePushBody.builder()\n    .platform(PusherPlatform.ANDROID)\n    .title(<span class=\"hljs-string\">\"消息推送\"</span>)\n    .message(<span class=\"hljs-string\">\"测试消息推送内容\"</span>)\n    .alias(Arrays.asList(<span class=\"hljs-string\">\"xxxx\"</span>))\n    <span class=\"hljs-comment\">// 扩展参数</span>\n    .extras(<span class=\"hljs-keyword\">new</span> HashMap(<span class=\"hljs-number\">1</span>) {\n      {\n        put(<span class=\"hljs-string\">\"role\"</span>, <span class=\"hljs-string\">\"USER\"</span>);\n      }\n    })\n    .build()\n  );\n}\n</code></pre>\n<h2>自定义推送提示声音</h2>\n<p><code>ApiBoot Message Push</code>可以推送自定义提示的声音，当然也需要APP开发人员做配置才可以，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n  apiBootMessagePushService.executePush(\n    MessagePushBody.builder()\n    .platform(PusherPlatform.ANDROID)\n    .title(<span class=\"hljs-string\">\"消息推送\"</span>)\n    .message(<span class=\"hljs-string\">\"测试消息推送内容\"</span>)\n    .alias(Arrays.asList(<span class=\"hljs-string\">\"xxxx\"</span>))\n    <span class=\"hljs-comment\">// 手机系统默认提示音</span>\n    .sound(<span class=\"hljs-string\">\"default\"</span>)\n    .build()\n  );\n}\n</code></pre>\n<p><code>sound</code>方法可以设置与<code>APP</code>开发人员约定的声明唯一名称。</p>\n<h2>设置推送角标数值</h2>\n<p>推送消息时<code>APP</code>的角标数值是可以自定义的，当然我们一般都是叠加，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n  apiBootMessagePushService.executePush(\n    MessagePushBody.builder()\n    .platform(PusherPlatform.ANDROID)\n    .title(<span class=\"hljs-string\">\"消息推送\"</span>)\n    .message(<span class=\"hljs-string\">\"测试消息推送内容\"</span>)\n    .alias(Arrays.asList(<span class=\"hljs-string\">\"xxxx\"</span>))\n    .tags(Arrays.asList(<span class=\"hljs-string\">\"group1\"</span>))\n    <span class=\"hljs-comment\">// 角标数值，默认为+1</span>\n    .badge(<span class=\"hljs-number\">999</span>)\n    .build()\n  );\n}\n</code></pre>\n",
  "link": "/zh-cn/docs/2.1.4.RELEASE/api-boot-message-push.html",
  "meta": {
    "title": "ApiBoot Message Push 使用文档"
  }
}