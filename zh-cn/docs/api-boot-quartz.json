{
  "filename": "api-boot-quartz.md",
  "__html": "<h1>ApiBoot 整合 Quartz 分布式任务调度框架</h1>\n<p><code>ApiBoot</code>内部集成了<code>Quartz</code>，提供了<code>数据库方式</code>、<code>内存方式</code>的进行任务的存储，其中<code>数据库</code>方式提供了<code>分布式集群任务调度</code>，任务自动平滑切换执行节点。</p>\n<h2>引用ApiBoot Quartz</h2>\n<p>在<code>pom.xml</code>配置文件内添加，如下配置：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Quartz--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-quartz<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<blockquote>\n<p>备注：如果使用<code>ApiBoot Quartz</code>的内存方式，仅需要添加上面的依赖即可。</p>\n</blockquote>\n<h2>相关配置</h2>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>是否必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>api.boot.quartz.job-store-type</code></td>\n<td>否</td>\n<td>memory</td>\n<td>任务存储源方式，默认内存方式</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.scheduler-name</code></td>\n<td>否</td>\n<td>scheduler</td>\n<td>调度器名称</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.auto-startup</code></td>\n<td>否</td>\n<td>true</td>\n<td>初始化后是否自动启动调度程序</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.startup-delay</code></td>\n<td>否</td>\n<td>0</td>\n<td>初始化完成后启动调度程序的延迟。</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.wait-for-jobs-to-complete-on-shutdown</code></td>\n<td>否</td>\n<td>false</td>\n<td>是否等待正在运行的作业在关闭时完成。</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.overwrite-existing-jobs</code></td>\n<td>否</td>\n<td>false</td>\n<td>配置的作业是否应覆盖现有的作业定义。</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.jdbc</code></td>\n<td>否</td>\n<td></td>\n<td>配置数据库方式的Jdbc相关配置</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.prop.job-store-class</code></td>\n<td>否</td>\n<td>org.quartz.impl.jdbcjobstore.JobStoreTX</td>\n<td>任务数据源类</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.prop.job-store-cluster-checkin-interval</code></td>\n<td>否</td>\n<td>20000</td>\n<td>集群检查时间</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.prop.scheduler-instance-id</code></td>\n<td>否</td>\n<td>AUTO</td>\n<td>调度器ID</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.prop.scheduler-instance-name</code></td>\n<td>否</td>\n<td>jobScheduler</td>\n<td>调度器名称</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.prop.job-store-table-prefix</code></td>\n<td>否</td>\n<td>QRTZ_</td>\n<td>表结构前缀</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.prop.job-store-clustered</code></td>\n<td>否</td>\n<td>true</td>\n<td>是否开启任务数据集群</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.prop.job-store-driver-delegate-class</code></td>\n<td>否</td>\n<td>org.quartz.impl.jdbcjobstore.StdJDBCDelegate</td>\n<td>任务数据源驱动类</td>\n</tr>\n<tr>\n<td><code>api.boot.quartz.prop.thread-pool-threads-inherit-context-class-loader-of-initializing-thread</code></td>\n<td>否</td>\n<td>true</td>\n<td>线程继承上下文类加载或定义线程</td>\n</tr>\n</tbody>\n</table>\n<h2>内存方式</h2>\n<p><code>ApiBoot Quartz</code>在使用内存方式存储任务时，不需要做配置调整。</p>\n<h2>数据库方式</h2>\n<p>需要在<code>application.yml</code>配置文件内修改<code>api.boot.quartz.job-store-type</code>参数，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    quartz:</span>\n      <span class=\"hljs-comment\"># Jdbc方式</span>\n<span class=\"hljs-attr\">      job-store-type:</span> <span class=\"hljs-string\">jdbc</span>\n</code></pre>\n<h3>Quartz所需表结构</h3>\n<p><code>Quartz</code>的数据库方式内部通过<code>DataSource</code>获取数据库连接对象来进行操作数据，所操作数据表的表结构是固定的，<code>ApiBoot</code>把<code>Quartz</code>所支持的所有表结构都进行了整理，访问<a href=\"https://github.com/hengboy/api-boot/tree/master/api-boot-samples/api-boot-sample-quartz/src/main/resources/schemas\">Quartz支持数据库建表语句列表</a>查看，复制执行对应数据库语句即可。</p>\n<h2>创建任务类</h2>\n<p>我们只需要让新建类集成<code>QuartzJobBean</code>就可以完成创建一个任务类，如下简单示例：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * 任务定义示例\n * 与Quartz使用方法一致，ApiBoot只是在原生基础上进行扩展，不影响原生使用\n * &lt;p&gt;\n * 继承QuartzJobBean抽象类后会在项目启动时会自动加入Spring IOC\n *\n * <span class=\"hljs-doctag\">@author</span>：恒宇少年 - 于起宇\n * &lt;p&gt;\n * DateTime：2019-03-28 17:26\n * Blog：https://blog.yuqiyu.com\n * WebSite：http://www.jianshu.com/u/092df3f77bca\n * Gitee：https://gitee.com/hengboy\n * GitHub：https://github.com/hengboy\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoJob</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">QuartzJobBean</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * logger instance\n     */</span>\n    <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(DemoJob.class);\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">executeInternal</span><span class=\"hljs-params\">(JobExecutionContext context)</span> <span class=\"hljs-keyword\">throws</span> JobExecutionException </span>{\n        logger.info(<span class=\"hljs-string\">\"定时任务Job Key ： {}\"</span>, context.getJobDetail().getKey());\n        logger.info(<span class=\"hljs-string\">\"定时任务执行时所携带的参数：{}\"</span>, JSON.toJSONString(context.getJobDetail().getJobDataMap()));\n        <span class=\"hljs-comment\">//...处理逻辑</span>\n    }\n}\n</code></pre>\n<h3>任务参数</h3>\n<p>在任务执行时传递参数是必须的，<code>ApiBoot Quartz</code>提供了比较方便的传递方式，不过最终<code>Quartz</code>会把传递的值都会转换为<code>String</code>类型数据。</p>\n<h3>任务Key默认值</h3>\n<p><code>ApiBoot Quartz</code>的<code>newJob</code>方法所创建的定时任务，如果在不传递<code>Job Key</code>参数时，会默认使用<code>UUID</code>随机字符串作为<code>Job Key</code>以及<code>Trigger Key</code>。</p>\n<h3>自定义任务开始时间</h3>\n<p>任务开始时间可以通过<code>startAtTime</code>方法进行设置，在不设置的情况下，任务创建完成后会立刻执行。</p>\n<h3>Cron 表达式任务</h3>\n<p>创建<code>Cron</code>类型任务如下所示：</p>\n<pre><code class=\"language-java\">String jobKey = apiBootQuartzService.newJob(ApiBootCronJobWrapper.Context()\n                        .jobClass(DemoJob.class)\n                        .cron(<span class=\"hljs-string\">\"0/5 * * * * ?\"</span>)\n                        .param(\n                                ApiBootJobParamWrapper.wrapper().put(<span class=\"hljs-string\">\"param\"</span>, <span class=\"hljs-string\">\"测试\"</span>))\n                        .wrapper());\n</code></pre>\n<p>Cron 表达式任务由<code>ApiBootCronJobWrapper</code>类进行构建。</p>\n<p>上面的<code>DemoJob</code>任务类将会每隔<code>5秒</code>执行一次。</p>\n<h3>Loop 重复任务</h3>\n<p><code>Loop</code>循环任务，当在不传递重复执行次数时，不进行重复执行，仅仅执行一次，如下所示：</p>\n<pre><code class=\"language-java\">String jobKey = apiBootQuartzService.newJob(\n                ApiBootLoopJobWrapper.Context()\n                        <span class=\"hljs-comment\">// 参数</span>\n                        .param(\n                                ApiBootJobParamWrapper.wrapper()\n                                        .put(<span class=\"hljs-string\">\"userName\"</span>, <span class=\"hljs-string\">\"恒宇少年\"</span>)\n                                        .put(<span class=\"hljs-string\">\"userAge\"</span>, <span class=\"hljs-number\">24</span>)\n                        )\n                        <span class=\"hljs-comment\">// 每次循环的间隔时间，单位：毫秒</span>\n                        .loopIntervalTime(<span class=\"hljs-number\">2000</span>)\n                        <span class=\"hljs-comment\">// 循环次数</span>\n                        .repeatTimes(<span class=\"hljs-number\">5</span>)\n                        <span class=\"hljs-comment\">// 开始时间，10秒后执行</span>\n                        .startAtTime(<span class=\"hljs-keyword\">new</span> Date(System.currentTimeMillis() + <span class=\"hljs-number\">10000</span>))\n                        <span class=\"hljs-comment\">// 任务类</span>\n                        .jobClass(DemoJob.class)\n                        .wrapper()\n        );\n</code></pre>\n<p>Loop 任务由<code>ApiBootLoopJobWrapper</code>类进行构建。</p>\n<p>上面的定时任务将会重复执行<code>5次</code>，连上自身执行的一次也就是会执行<code>6次</code>，每次的间隔时间为<code>2秒</code>，在任务创建<code>10秒</code>后进行执行。</p>\n<h3>Once 一次性任务</h3>\n<p><code>Once</code>一次性任务，任务执行一次会就会被自动释放，如下所示：</p>\n<pre><code class=\"language-java\">\nMap paramMap = <span class=\"hljs-keyword\">new</span> HashMap(<span class=\"hljs-number\">1</span>);\nparamMap.put(<span class=\"hljs-string\">\"paramKey\"</span>, <span class=\"hljs-string\">\"参数值\"</span>);\n\nString jobKey = apiBootQuartzService.newJob(\n  ApiBootOnceJobWrapper.Context()\n  .jobClass(DemoJob.class)\n  <span class=\"hljs-comment\">// 参数</span>\n  .param(\n    ApiBootJobParamWrapper.wrapper()\n    .put(<span class=\"hljs-string\">\"mapJson\"</span>, JSON.toJSONString(paramMap))\n  )\n  <span class=\"hljs-comment\">// 开始时间，2秒后执行</span>\n  .startAtTime(<span class=\"hljs-keyword\">new</span> Date(System.currentTimeMillis() + <span class=\"hljs-number\">2000</span>))\n  .wrapper()\n);\n\n</code></pre>\n<p>Once 任务由<code>ApiBootOnceJobWrapper</code>类进行构建。</p>\n<p>在参数传递时可以是对象、集合，不过需要进行转换成字符串才可以进行使用。</p>\n<h2>暂停任务执行</h2>\n<p>任务在执行过程中可以进行暂停操作，通过<code>ApiBoot Quartz</code>提供的<code>pauseJob</code>方法就可以很简单的实现，当然暂停时需要传递<code>Job Key</code>，<code>Job Key</code>可以从创建任务方法返回值获得。</p>\n<p>暂停任务如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 暂停指定Job Key的任务</span>\napiBootQuartzService.pauseJob(jobKey);\n<span class=\"hljs-comment\">// 暂停多个执行中任务</span>\napiBootQuartzService.pauseJobs(jobKey,jobKey,jobKey);\n</code></pre>\n<h2>恢复任务执行</h2>\n<p>任务执行完暂停后，如果想要恢复可以使用如下方式：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 恢复指定Job Key的任务执行</span>\napiBootQuartzService.resumeJob(jobKey);\n<span class=\"hljs-comment\">// 恢复多个暂停任务</span>\napiBootQuartzService.resumeJobs(jobKey,jobKey,jobKey);\n</code></pre>\n<h2>修改Cron表达式</h2>\n<p>修改<code>Cron</code>表达式的场景如下：</p>\n<ul>\n<li>已创建 &amp; 未执行</li>\n<li>已创建 &amp; 已执行</li>\n</ul>\n<p>修改方法如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 修改执行Job Key任务的Cron表达式</span>\napiBootQuartzService.updateJobCron(jobKey, <span class=\"hljs-string\">\"0/5 * * * * ?\"</span>);\n</code></pre>\n<h2>删除任务</h2>\n<p>想要手动释放任务时可以使用如下方式：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 手动删除指定Job Key任务</span>\napiBootQuartzService.deleteJob(jobKey);\n<span class=\"hljs-comment\">// 手动删除多个任务</span>\napiBootQuartzService.deleteJobs(jobKey,jobKey,jobKey);\n</code></pre>\n<p>删除任务的顺序如下：</p>\n<ol>\n<li>暂停触发器</li>\n<li>移除触发器</li>\n<li>删除任务</li>\n</ol>\n",
  "link": "/zh-cn/docs/api-boot-quartz.html",
  "meta": {
    "title": "ApiBoot Quartz 使用文档"
  }
}