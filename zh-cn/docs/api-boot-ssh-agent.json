{
  "filename": "api-boot-ssh-agent.md",
  "__html": "<h2>SSH-Agent是什么？</h2>\n<p>如果运维人员只给你通过SSH公钥的方式授权访问，该服务器并不开放我们需要的服务的端口号时，我们该怎么做才能访问到对应的服务呢？</p>\n<p>其实上面的问题我们在平时工作中经常遇到，为了服务的数据安全性考虑，一般不会直接将端口号开放，我们只能通过登录服务器后使用命令才可以进行操作，目前市面上也有很多的工具支持SSH公钥的方式连接，比如：DataGrip、Navicat、Redis Desktop Manager、MongoDB Compass等工具。</p>\n<p>那如果我们的本地项目需要连接到远程服务的数据库、Redis或者MongoDB时该怎么去做呢？</p>\n<p><strong>SSH-Agent就是来解决这类问题的，主要原理是在本地创建一个端口通过SSH方式登录后与远程服务器的端口号进行绑定，这样我们连接本地的端口号时就可以访问到远程服务器的服务了。</strong></p>\n<h2>添加依赖</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-ssh-agent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<h2>配置参数</h2>\n<p>在<code>application.yml/properties</code>配置文件内的配置前缀为：<code>api.boot.ssh-agent</code>，通过<code>api.boot.ssh-agent.configs</code>配置多个代理信息，每个代理配置的参数如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>username</td>\n<td>-</td>\n<td>配置连接服务器的用户名</td>\n</tr>\n<tr>\n<td>password</td>\n<td>-</td>\n<td>配置连接服务器的密码（仅限密码认证方式）</td>\n</tr>\n<tr>\n<td>authentication-method</td>\n<td>SSH_PRIVATE_KEY</td>\n<td>认证方式<br />USERNAME_PASSWORD：用户名密码方式<br />SSH_PRIVATE_KEY：SSH秘钥方式</td>\n</tr>\n<tr>\n<td>server-ip</td>\n<td>-</td>\n<td>配置连接服务器的IP地址</td>\n</tr>\n<tr>\n<td>ssh-port</td>\n<td>22</td>\n<td>配置连接服务器的SSH端口号</td>\n</tr>\n<tr>\n<td>ssh-private-key-path</td>\n<td>~/.ssh/id_rsa</td>\n<td>SSH方式认证秘钥地址</td>\n</tr>\n<tr>\n<td>ssh-known-hosts-path</td>\n<td>~/.ssh/known_hosts</td>\n<td>配置已知主机配置文件地址</td>\n</tr>\n<tr>\n<td>local-port</td>\n<td>-</td>\n<td>本地代理的端口号</td>\n</tr>\n<tr>\n<td>forward-target-port</td>\n<td>-</td>\n<td>配置转发到远程服务器的端口号</td>\n</tr>\n<tr>\n<td>forward-target-ip</td>\n<td>127.0.0.1</td>\n<td>登录后的服务器IP地址，如果是局域网，可以配置内网IP地址</td>\n</tr>\n<tr>\n<td>addition</td>\n<td>-</td>\n<td>jsch认证需要的额外附加参数列表</td>\n</tr>\n</tbody>\n</table>\n<h2>认证方式</h2>\n<p>目前登录服务器的认证方式有两种：</p>\n<ul>\n<li>用户名 + 密码：直接通过用户名密码的方式登录远程服务器，不需要走SSH</li>\n<li>用户名 + 秘钥：需要通过SSH连接远程服务器，远程服务器需要配置授权的公钥（默认方式，也建议使用这种，安全系数好高很多）</li>\n</ul>\n<h2>日志输出</h2>\n<p>在项目启动时如果在<code>application.yml/properties</code>文件内配置的服务器连接信息没有问题，控制台会输出绑定转发端口成功的日志，如下所示：</p>\n<pre><code>2020-12-18 22:07:31.440  INFO 2521 --- [           main] o.m.f.ssh.agent.DefaultAgentConnection   : Port forwarding binding is completed, local port : 3307, forward IP: 127.0.0.1, forward port : 3306\n</code></pre>\n",
  "link": "/zh-cn/docs/api-boot-ssh-agent.html",
  "meta": {
    "title": "远程服务端口代理组件使用文档"
  }
}