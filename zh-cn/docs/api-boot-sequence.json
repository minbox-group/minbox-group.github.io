{
  "filename": "api-boot-sequence.md",
  "__html": "<h2>ApiBoot Sequence</h2>\n<p><code>ApiBoot</code>内整合了分布式高效的ID生成方式，基于Twitter的Snowflake算法实现分布式高效有序ID生产黑科技。</p>\n<blockquote>\n<p>该组件在<code>v2.2.5</code>版本后新增。</p>\n</blockquote>\n<h2>1. 添加依赖组件</h2>\n<p>在<code>pom.xml</code>配置文件内添加如下：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Sequence--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-sequence<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<h2>2. 特性</h2>\n<ol>\n<li>支持自定义允许时间回拨的范围</li>\n<li>解决跨毫秒起始值每次为0开始的情况（避免末尾必定为偶数，而不便于取余使用问题）</li>\n<li>解决高并发场景中获取时间戳性能问题</li>\n<li>支撑根据IP末尾数据作为workerId</li>\n<li>时间回拨方案思考：1024个节点中分配10个点作为时间回拨序号（连续10次时间回拨的概率较小）</li>\n</ol>\n<h2>3. 配置数据中心编号</h2>\n<p><code>ApiBoot Sequence</code>内提供了配置<strong>数据中心编号</strong>的参数，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n    <span class=\"hljs-attr\">boot:</span>\n        <span class=\"hljs-attr\">sequence:</span>\n            <span class=\"hljs-comment\"># 数据中心的编号，默认值为：1，取值的范围：0 ~ 3</span>\n            <span class=\"hljs-attr\">data-center-id:</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<h2>4. 配置工作机器编号</h2>\n<p><code>ApiBoot Sequence</code>内提供了配置<strong>工作机器编号</strong>的参数，可以指定运行的机器编号，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n    <span class=\"hljs-attr\">boot:</span>\n        <span class=\"hljs-attr\">sequence:</span>\n            <span class=\"hljs-comment\"># 工作机器的编号，默认值为1，取值的范围：0 ~ 255</span>\n            <span class=\"hljs-attr\">worker-id:</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<h2>5. ApiBootSequenceContext</h2>\n<p><code>ApiBootSequenceContext</code>是由<code>ApiBoot Sequence</code>提供的生成ID的封装类，该类在<code>org.minbox.framework.api.boot.autoconfigure.sequence.ApiBootSequenceAutoConfiguration</code>自动化配置中进行实例化并加入了<code>Spring IOC</code>，所以我们如果在项目中使用，直接注入即可，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * 注入ApiBoot提供的分布式ID生成类\n  * &lt;p&gt;\n  * 调用{<span class=\"hljs-doctag\">@link</span> ApiBootSequenceContext#nextId()}、{<span class=\"hljs-doctag\">@link</span> ApiBootSequenceContext#nextStringId()}方法可以直接获取ID\n  */</span>\n<span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> ApiBootSequenceContext apiBootSequenceContext;\n</code></pre>\n<h2>6. 获取ID</h2>\n<p>在<code>ApiBootSequenceContext</code>内提供了两个获取下一个<strong>ID</strong>的方法，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * 获取下一个分布式ID的值\n  * &lt;p&gt;\n  * 返回{<span class=\"hljs-doctag\">@link</span> String}类型的值\n  *\n  * <span class=\"hljs-doctag\">@return</span> 下一个ID的值\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">nextStringId</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> String.valueOf(<span class=\"hljs-keyword\">this</span>.nextId());\n}\n\n<span class=\"hljs-comment\">/**\n  * 获取下一个分布式ID的值\n  * &lt;p&gt;\n  * 返回{<span class=\"hljs-doctag\">@link</span> Long} 类型的值\n  *\n  * <span class=\"hljs-doctag\">@return</span> 下一个ID的值\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Long <span class=\"hljs-title\">nextId</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.sequence.nextId();\n}\n</code></pre>\n<p>使用示例：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 获取下一个String类型的ID</span>\nString nextId = apiBootSequenceContext.nextStringId();\n<span class=\"hljs-comment\">// 获取下一个Long类型的ID</span>\nLong nextLongId = apiBootSequenceContext.nextId();\n<span class=\"hljs-comment\">// 输出结果：289894597327331328,289894597327331329</span>\nSystem.out.println(nextId + <span class=\"hljs-string\">\",\"</span> + nextLongId);\n</code></pre>\n",
  "link": "/zh-cn/docs/api-boot-sequence.html",
  "meta": {
    "title": "ApiBoot Sequence 使用文档"
  }
}