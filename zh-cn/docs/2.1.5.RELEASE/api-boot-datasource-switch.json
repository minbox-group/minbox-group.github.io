{
  "filename": "api-boot-datasource-switch.md",
  "__html": "<h1>ApiBoot 多数据源选择解决方案</h1>\n<p>顾名思义，<code>DataSource Switch</code>是用于数据源选择切换的框架，这是一款基于<code>Spring AOP</code>切面指定注解实现的，通过简单的数据源注解配置就可以完成访问时的自动切换，<code>DataSource Switch</code>切换过程中是线程安全的。</p>\n<h2>添加依赖</h2>\n<p>使用<code>DataSource Switch</code>很简单，在<code>pom.xml</code>配置文件内添加如下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot DataSource Switch--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-datasource-switch<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<h2>集成数据源实现</h2>\n<p>目前<code>ApiBoot DataSource Switch</code>集成了<code>Druid</code>、<code>HikariCP</code>两种数据源实现依赖，在使用方面也有一定的差异，因为每一个数据源的内置参数不一致。</p>\n<ul>\n<li><code>Druid</code>：参数配置前缀为<code>api.boot.datasource.druid</code></li>\n<li><code>HikariCP</code>：参数配置前缀为<code>api.boot.datasource.hikari</code></li>\n</ul>\n<p><strong>具体使用请查看下面功能配置介绍。</strong></p>\n<h2>配置参数</h2>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>参数默认值</th>\n<th>是否必填</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>api.boot.datasource.primary</code></td>\n<td>master</td>\n<td>否</td>\n<td>主数据源名称</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.url</code></td>\n<td>无</td>\n<td>是</td>\n<td>数据库连接字符串</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.username</code></td>\n<td>无</td>\n<td>是</td>\n<td>用户名</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.password</code></td>\n<td>无</td>\n<td>是</td>\n<td>密码</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.driver-class-name</code></td>\n<td>com.mysql.cj.jdbc.Driver</td>\n<td>否</td>\n<td>驱动类型</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.filters</code></td>\n<td>stat,wall,slf4j</td>\n<td>否</td>\n<td>Druid过滤</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.max-active</code></td>\n<td>20</td>\n<td>否</td>\n<td>最大连接数</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.initial-size</code></td>\n<td>1</td>\n<td>否</td>\n<td>初始化连接数</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.max-wait</code></td>\n<td>60000</td>\n<td>否</td>\n<td>最大等待市场，单位：毫秒</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.validation-query</code></td>\n<td>select 1 from dual</td>\n<td>否</td>\n<td>检查sql</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.test-while-idle</code></td>\n<td>true</td>\n<td>否</td>\n<td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.test-on-borrow</code></td>\n<td>false</td>\n<td>否</td>\n<td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.druid.{poolName}.test-on-return</code></td>\n<td>false</td>\n<td>否</td>\n<td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.hikari.{poolName}.url</code></td>\n<td>无</td>\n<td>是</td>\n<td>数据库连接字符串</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.hikari.{poolName}.username</code></td>\n<td>无</td>\n<td>是</td>\n<td>用户名</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.hikari.{poolName}.password</code></td>\n<td>无</td>\n<td>是</td>\n<td>密码</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.hikari.{poolName}.driver-class-name</code></td>\n<td>com.mysql.cj.jdbc.Driver</td>\n<td>否</td>\n<td>数据库驱动类全限定名</td>\n</tr>\n<tr>\n<td><code>api.boot.datasource.hikari.{poolName}.property</code></td>\n<td>无</td>\n<td>否</td>\n<td>HikariCP属性配置</td>\n</tr>\n</tbody>\n</table>\n<p><code>HikariCP</code>数据源是<code>SpringBoot2.x</code>自带的，配置参数请访问<a href=\"https://github.com/brettwooldridge/HikariCP\">HikariCP</a>。</p>\n<h2>单主配置</h2>\n<p><code>ApiBoot DataSource Switch</code>支持单主数据源的配置，<code>application.yml</code>配置文件如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n    <span class=\"hljs-attr\">datasource:</span>\n      <span class=\"hljs-comment\"># 配置使用hikari数据源</span>\n      <span class=\"hljs-attr\">hikari:</span>\n        <span class=\"hljs-comment\"># master datasource config</span>\n        <span class=\"hljs-attr\">master:</span>\n          <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span>\n          <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n          <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n</code></pre>\n<h2>修改主数据源名称</h2>\n<p><code>master</code>为默认的主数据源的<code>poolName</code>，这里可以进行修改为其他值，不过需要对应修改<code>primary</code>参数，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n    <span class=\"hljs-attr\">datasource:</span>\n      <span class=\"hljs-comment\"># 主数据源，默认值为master</span>\n      <span class=\"hljs-attr\">primary:</span> <span class=\"hljs-string\">main</span>\n      <span class=\"hljs-comment\"># 配置使用hikari数据源</span>\n      <span class=\"hljs-attr\">hikari:</span>\n        <span class=\"hljs-comment\"># main datasource config</span>\n        <span class=\"hljs-attr\">main:</span>\n          <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span>\n          <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n          <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n</code></pre>\n<p>在上面配置主数据源的<code>poolName</code>修改为<code>main</code>。</p>\n<h2>主从配置</h2>\n<p>如果你的项目内存在<code>单主单从</code>、<code>一主多从</code>的配置方式，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n    <span class=\"hljs-attr\">datasource:</span>\n      <span class=\"hljs-comment\"># 配置使用hikari数据源</span>\n      <span class=\"hljs-attr\">hikari:</span>\n        <span class=\"hljs-comment\"># master datasource config</span>\n        <span class=\"hljs-attr\">master:</span>\n          <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span>\n          <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n          <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n          <span class=\"hljs-comment\"># 默认值为【com.mysql.cj.jdbc.Driver】</span>\n          <span class=\"hljs-comment\">#driver-class-name: com.mysql.cj.jdbc.Driver</span>\n        <span class=\"hljs-comment\"># slave 1  datasource config</span>\n        <span class=\"hljs-attr\">slave_1:</span>\n          <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/oauth2?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span>\n          <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n          <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n        <span class=\"hljs-comment\"># slave 2  datasource config</span>\n        <span class=\"hljs-attr\">slave_2:</span>\n          <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/resources?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span>\n          <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n          <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n</code></pre>\n<p>在上面是<code>一主多从</code>的配置方式，分别是<code>master</code>、<code>slave_1</code>、<code>slave_2</code>。</p>\n<h2>多类型数据库配置</h2>\n<p><code>ApiBoot DataSource Switch</code>提供了一个项目内连接多个不同类型的数据库，如：<code>MySQL</code>、<code>Oracle</code>...等，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n  <span class=\"hljs-attr\">boot:</span>\n      <span class=\"hljs-comment\"># 主数据源，默认值为master</span>\n      <span class=\"hljs-attr\">primary:</span> <span class=\"hljs-string\">mysql</span>\n      <span class=\"hljs-attr\">hikari:</span>\n        <span class=\"hljs-attr\">mysql:</span>\n          <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span>\n          <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n          <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n        <span class=\"hljs-attr\">oracle:</span>\n          <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:oracle:thin:@172.16.10.25:1521:torcl</span>\n          <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n          <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n          <span class=\"hljs-attr\">driver-class-name:</span> <span class=\"hljs-string\">oracle.jdbc.driver.OracleDriver</span>\n</code></pre>\n<p>在上面配置中，<code>master</code>主数据源使用的<code>MySQL</code>驱动连接<code>MySQL</code>数据库，而<code>slave</code>从数据源则是使用的<code>Oracle</code>驱动连接的<code>Oracle</code>数据库。</p>\n<h2>动态创建数据源</h2>\n<p><code>ApiBoot DataSource Switch</code>内部提供了动态创建数据源的方法，可以通过注入<code>ApiBootDataSourceFactoryBean</code>来进行添加，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> ApiBootDataSourceFactoryBean factoryBean;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">createNewDataSource</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n  <span class=\"hljs-comment\">// 创建Hikari数据源</span>\n  <span class=\"hljs-comment\">// 如果创建Druid数据源，使用DataSourceDruidConfig</span>\n  DataSourceHikariConfig config = <span class=\"hljs-keyword\">new</span> DataSourceHikariConfig();\n  <span class=\"hljs-comment\">// 数据库连接：必填</span>\n  config.setUrl(<span class=\"hljs-string\">\"jdbc:mysql://localhost:3306/resources\"</span>);\n  <span class=\"hljs-comment\">// 用户名：必填</span>\n  config.setUsername(<span class=\"hljs-string\">\"root\"</span>);\n  <span class=\"hljs-comment\">// 密码：必填</span>\n  config.setPassword(<span class=\"hljs-string\">\"123456\"</span>);\n  <span class=\"hljs-comment\">// 数据源名称：必填(用于@DataSourceSwitch注解value值使用)</span>\n  config.setPoolName(<span class=\"hljs-string\">\"dynamic\"</span>);\n\n  <span class=\"hljs-comment\">// 创建数据源</span>\n  DataSource dataSource = factoryBean.newDataSource(config);\n  Connection connection = dataSource.getConnection();\n  System.out.println(connection.getCatalog());\n  connection.close();\n}\n</code></pre>\n<h2>自动切换</h2>\n<p><code>ApiBoot DataSource Switch</code>的数据源自动切换主要归功于<code>Spring</code>的<code>AOP</code>，通过切面<code>@DataSourceSwitch</code>注解，获取注解配置的<code>value</code>值进行设置当前线程所用的数据源名称，从而通过<code>AbstractRoutingDataSource</code>进行数据源的路由切换。</p>\n<p>我们沿用上面<strong>一主多从</strong>的配置进行代码演示，配置文件<code>application.yml</code>参考上面配置，代码示例如下：</p>\n<h3>从数据源示例类</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-meta\">@DataSourceSwitch</span>(<span class=\"hljs-string\">\"slave\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SlaveDataSourceSampleService</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * DataSource Instance\n     */</span>\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> DataSource dataSource;\n\n    <span class=\"hljs-comment\">/**\n     * 演示输出数据源的catalog\n     *\n     * <span class=\"hljs-doctag\">@throws</span> Exception\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        <span class=\"hljs-comment\">// 获取链接</span>\n        Connection connection = dataSource.getConnection();\n        <span class=\"hljs-comment\">// 输出catalog</span>\n        System.out.println(<span class=\"hljs-keyword\">this</span>.getClass().getSimpleName() + <span class=\"hljs-string\">\" -&gt;\"</span> + connection.getCatalog());\n        <span class=\"hljs-comment\">// 关闭链接</span>\n        connection.close();\n    }\n}\n</code></pre>\n<h3>主数据源示例类</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-meta\">@DataSourceSwitch</span>(<span class=\"hljs-string\">\"master\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MasterDataSourceSampleService</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * DataSource Instance\n     */</span>\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> DataSource dataSource;\n    <span class=\"hljs-comment\">/**\n     * Slave Sample Service\n     */</span>\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> SlaveDataSourceSampleService slaveDataSourceSampleService;\n\n    <span class=\"hljs-comment\">/**\n     * 演示输出主数据源catalog\n     * 调用从数据源类演示输出catalog\n     * \n     * <span class=\"hljs-doctag\">@throws</span> Exception\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        Connection connection = dataSource.getConnection();\n        System.out.println(<span class=\"hljs-keyword\">this</span>.getClass().getSimpleName() + <span class=\"hljs-string\">\" -&gt;\"</span> + connection.getCatalog());\n        connection.close();\n        slaveDataSourceSampleService.print();\n    }\n}\n</code></pre>\n<ul>\n<li>在<code>主数据源</code>的示例类内，我们通过<code>@DataSourceSwitch(&quot;master&quot;)</code>注解的<code>value</code>进行定位连接<code>master</code>数据源数据库。</li>\n<li>同样在<code>从数据库</code>的示例类内，我们也可以通过<code>@DataSourceSwitch(&quot;slave&quot;)</code>注解的<code>value</code>进行定位连接<code>slave</code>数据源数据库。</li>\n</ul>\n<h3>单元测试示例</h3>\n<p>在上面的测试示例中，我们使用交叉的方式进行验证<code>数据源路由</code>是否可以正确的进行切换，可以编写一个单元测试进行验证结果，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> MasterDataSourceSampleService masterDataSourceSampleService;\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">contextLoads</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n\tmasterDataSourceSampleService.print();\n}\n</code></pre>\n<p>运行上面测试方法，结果如下所示：</p>\n<pre><code class=\"language-sh\">MasterDataSourceSampleService -&gt;<span class=\"hljs-built_in\">test</span>\n2019-04-04 10:20:45.407  INFO 7295 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...\n2019-04-04 10:20:45.411  INFO 7295 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.\nSlaveDataSourceSampleService -&gt;oauth2\n</code></pre>\n<p>单次执行数据源切换没有任何的问题，<code>master</code>数据源获取<code>catalog</code>输出后，调用<code>slave</code>示例类进行输出<code>catalog</code>。</p>\n<blockquote>\n<p><code>ApiBoot DataSource Switch</code>会在项目启动时首先初始化<code>master</code>节点<code>DataSource</code>实例，其他实例会在第一次调用时进行初始化。</p>\n</blockquote>\n<h2>压力性能测试</h2>\n<p>单次执行单线程操作没有问题，不代表多线程下不会出现问题，在开头说到过<code>ApiBoot DataSource Switch</code>是线程安全的，所以接下来我们来验证这一点，我们需要添加压力测试的依赖，如下所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.databene<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>contiperf<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>接下来把上面的单元测试代码改造下，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 初始化压力性能测试对象</span>\n<span class=\"hljs-meta\">@Rule</span>\n<span class=\"hljs-keyword\">public</span> ContiPerfRule i = <span class=\"hljs-keyword\">new</span> ContiPerfRule();\n\n<span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> MasterDataSourceSampleService masterDataSourceSampleService;\n<span class=\"hljs-comment\">/**\n* 开启500个线程执行10000次\n*/</span>\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-meta\">@PerfTest</span>(invocations = <span class=\"hljs-number\">10000</span>, threads = <span class=\"hljs-number\">500</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">contextLoads</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n  masterDataSourceSampleService.print();\n}\n</code></pre>\n<blockquote>\n<p>测试环境：</p>\n<p>硬件：i7、16G、256SSD</p>\n<p>系统：OS X</p>\n<p>整个过程大约是10秒左右，<code>ApiBoot DataSource Switch</code>并没有发生出现切换错乱的情况。</p>\n</blockquote>\n<h2>注意事项</h2>\n<ol>\n<li>在使用<code>ApiBoot DataSource Switch</code>时需要添加对应数据库的依赖</li>\n<li>如果使用<code>Druid</code>连接池，不要配置使用<code>druid-starter</code>的依赖，请使用<code>druid</code>依赖。</li>\n<li>配置<code>poolName</code>时不要添加特殊字符、中文、中横线等。</li>\n</ol>\n",
  "link": "/zh-cn/docs/2.1.5.RELEASE/api-boot-datasource-switch.html",
  "meta": {
    "title": "ApiBoot DataSource Switch 使用文档"
  }
}