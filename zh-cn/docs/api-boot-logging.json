{
  "filename": "api-boot-logging.md",
  "__html": "<h1>ApiBoot 零侵入、链路式请求日志分析框架</h1>\n<p><code>ApiBoot</code>提供单应用、微服务应用下的请求日志分析框架<code>ApiBoot Logging</code>，特性列表如下所示：</p>\n<ul>\n<li><code>链路</code>：为每一个请求生成一个链路的单条或者多条请求日志信息，精准定位程序出现问题的位置。</li>\n<li><code>耗时</code>：可以分析出每一个请求的耗时，改善服务的性能瓶颈</li>\n<li><code>异常信息</code>：请求遇到异常，提供请求日志的异常堆栈信息记录</li>\n<li><code>请求参数</code>：可以获取<code>RequestBody</code>、<code>PathParam</code>两种方式的参数</li>\n<li><code>响应内容</code>：可以获取本次请求响应的内容信息。</li>\n<li><code>服务信息</code>：可获取提供服务的ID、IP、Port等信息。</li>\n<li><code>异步通知</code>：请求日志数据采集后通过<code>Event/Listener</code>方式异步通知给<code>RPC</code>、<code>MQ</code>、<code>REST</code>、<code>Local</code>。</li>\n<li><code>数据分析</code>：阈值警告、异常通知等（短信、邮件等方式，2.1.1.RELEASE版本未实现.）</li>\n</ul>\n<blockquote>\n<p><code>ApiBoot Logging</code>内部采用<code>拦截器</code>、<code>Filter</code>组合完成一系列的操作。</p>\n<ol>\n<li>如果一个请求的<code>header</code>信息内包含<code>traceId（链路ID）</code>则加入该链路，如果不存在则生成新的链路信息</li>\n<li>如果一个请求的<code>header</code>信息内包含<code>spanId（跨度ID）</code>，则使用该<code>spanId</code>作为<code>parent spanId</code>，对两个请求进行上下级关联。</li>\n</ol>\n</blockquote>\n<h2>架构设计图</h2>\n<p><img src=\"/img/apiboot-logging.png\" alt=\"ApiBoot Logging架构设计图\"></p>\n<h2>1. 添加依赖组件</h2>\n<p>在<code>pom.xml</code>配置文件内添加依赖，如下所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!--ApiBoot Logging--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.minbox.framework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>api-boot-starter-logging<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h3>内部封装的组件</h3>\n<p><code>ApiBoot</code>从<code>2.1.3.RELEASE</code>版本开始陆续会将<code>api-boot-plugins</code>模块下的组件从<code>api-boot</code>项目分离到<code>minbox-projects</code>开源组织内作为独立的项目进行升级维护，<code>ApiBoot Logging</code>内部通过封装<code>minbox-projects/minbox-logging</code>组件的<code>minbox-logging-client</code>实现。</p>\n<blockquote>\n<p><code>minbox-logging</code>源码地址：<a href=\"https://gitee.com/minbox-projects/minbox-logging\">https://gitee.com/minbox-projects/minbox-logging</a></p>\n</blockquote>\n<blockquote>\n<p>注意：如果未添加<code>ApiBoot</code>版本依赖，请访问<a href=\"/zh-cn/docs/version-rely.html\">版本依赖</a>查看添加方式。</p>\n</blockquote>\n<h2>2. 修改采集日志路径前缀</h2>\n<p><code>ApiBoot Logging</code>默认采集<code>/**</code>下的所有请求路径，通过修改<code>application.yml</code>配置来变更采集日志路径的前缀：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    logging:</span>\n      <span class=\"hljs-comment\"># 修改日志路径前缀，可配置多个</span>\n<span class=\"hljs-attr\">      logging-path-prefix:</span>\n<span class=\"hljs-bullet\">        -</span> <span class=\"hljs-string\">/user/**</span>\n<span class=\"hljs-bullet\">        -</span> <span class=\"hljs-string\">/order/**</span>\n</code></pre>\n<p>在上面配置中，<code>ApiBoot Logging</code>只会采集<code>/user/**</code>、<code>/order/**</code>下所有路径的请求，并将日志上报到<code>ApiBoot Logging Admin</code>。</p>\n<h2>3. 排除不采集日志的路径</h2>\n<p><code>ApiBoot Logging</code>可以指定某些路径的请求日志不进行采集、上报，比如：<code>/actuator/health</code>，通过修改<code>application.yml</code>配置来排除采集日志的路径列表，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    logging:</span>\n      <span class=\"hljs-comment\"># 排除采集请求日志的路径列表</span>\n<span class=\"hljs-attr\">      ignore-paths:</span>\n<span class=\"hljs-bullet\">        -</span> <span class=\"hljs-string\">/actuator/health</span>\n</code></pre>\n<h2>4. 修改日志等级</h2>\n<p>如果想让<code>ApiBoot Logging</code>在控制台输出日志信息，需要修改<code>application.yml</code>配置文件内的日志等级，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">logging:</span>\n<span class=\"hljs-attr\">  level:</span>\n    <span class=\"hljs-string\">org.minbox.framework.api.boot.plugin.logging:</span> <span class=\"hljs-string\">debug</span>\n</code></pre>\n<h2>5. 美化控制台打印日志信息</h2>\n<p>为了方便查看控制台打印的请求日志信息，<code>ApiBoot Logging</code>支持美化日志<code>json</code>信息，配置文件如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    logging:</span>\n<span class=\"hljs-attr\">      format-console-log-json:</span> <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>效果如下所示：</p>\n<pre><code class=\"language-sh\">2019-07-24 12:56:11.231 DEBUG 3833 --- [nio-8080-exec-2] f.a.b.p.l.n.ApiBootLoggingNoticeListener : Request Uri：/index， Logging：\n{\n\t<span class=\"hljs-string\">\"endTime\"</span>:1563944171115,\n\t<span class=\"hljs-string\">\"httpStatus\"</span>:200,\n\t<span class=\"hljs-string\">\"requestBody\"</span>:<span class=\"hljs-string\">\"{\\n\\t\\\"name\\\":\\\"测试\\\",\\n\\t\\\"email\\\":\\\"jnyuqy@gmail.com\\\"\\n}\"</span>,\n\t<span class=\"hljs-string\">\"requestHeaders\"</span>:{\n\t\t<span class=\"hljs-string\">\"accept\"</span>:<span class=\"hljs-string\">\"*/*\"</span>,\n\t\t<span class=\"hljs-string\">\"accept-encoding\"</span>:<span class=\"hljs-string\">\"gzip, deflate\"</span>,\n\t\t<span class=\"hljs-string\">\"cache-control\"</span>:<span class=\"hljs-string\">\"no-cache\"</span>,\n\t\t<span class=\"hljs-string\">\"connection\"</span>:<span class=\"hljs-string\">\"keep-alive\"</span>,\n\t\t<span class=\"hljs-string\">\"content-length\"</span>:<span class=\"hljs-string\">\"52\"</span>,\n\t\t<span class=\"hljs-string\">\"content-type\"</span>:<span class=\"hljs-string\">\"application/json\"</span>,\n\t\t<span class=\"hljs-string\">\"cookie\"</span>:<span class=\"hljs-string\">\"JSESSIONID=8E206A652D76A5DF1775FC8988549DF4\"</span>,\n\t\t<span class=\"hljs-string\">\"host\"</span>:<span class=\"hljs-string\">\"localhost:8080\"</span>,\n\t\t<span class=\"hljs-string\">\"postman-token\"</span>:<span class=\"hljs-string\">\"cc60ceb7-32de-46f1-a7a4-86d694edd073\"</span>,\n\t\t<span class=\"hljs-string\">\"user-agent\"</span>:<span class=\"hljs-string\">\"PostmanRuntime/7.15.2\"</span>\n\t},\n\t<span class=\"hljs-string\">\"requestIp\"</span>:<span class=\"hljs-string\">\"0:0:0:0:0:0:0:1\"</span>,\n\t<span class=\"hljs-string\">\"requestMethod\"</span>:<span class=\"hljs-string\">\"POST\"</span>,\n\t<span class=\"hljs-string\">\"requestUri\"</span>:<span class=\"hljs-string\">\"/index\"</span>,\n\t<span class=\"hljs-string\">\"responseBody\"</span>:<span class=\"hljs-string\">\"测试\"</span>,\n\t<span class=\"hljs-string\">\"responseHeaders\"</span>:{},\n\t<span class=\"hljs-string\">\"serviceId\"</span>:<span class=\"hljs-string\">\"api-boot-sample-logging\"</span>,\n\t<span class=\"hljs-string\">\"serviceIp\"</span>:<span class=\"hljs-string\">\"192.168.10.156\"</span>,\n\t<span class=\"hljs-string\">\"servicePort\"</span>:<span class=\"hljs-string\">\"8080\"</span>,\n\t<span class=\"hljs-string\">\"spanId\"</span>:<span class=\"hljs-string\">\"81c0016e-9bf7-4e86-bcad-98574f0df14c\"</span>,\n\t<span class=\"hljs-string\">\"startTime\"</span>:1563944171049,\n\t<span class=\"hljs-string\">\"timeConsuming\"</span>:66,\n\t<span class=\"hljs-string\">\"traceId\"</span>:<span class=\"hljs-string\">\"409b6f2c-f70a-4648-9673-915534bc5aa9\"</span>\n}\n</code></pre>\n<h2>6. 日志上报方式</h2>\n<p><code>ApiBoot Logging</code>内部提供了两种上报方式，分别是<code>just</code>、<code>timing</code>。</p>\n<h3>6.1 just方式</h3>\n<p><code>just</code>顾名思义是直接方式上报，也是<code>ApiBoot Logging</code>内默认的方式，当一个请求日志产生之后会<strong>实时上报</strong>到<code>Logging Admin</code>，利弊分析：</p>\n<ul>\n<li>优点\n<ul>\n<li>数据分析延迟低</li>\n<li>提高数据有效性，防止丢失</li>\n</ul>\n</li>\n<li>弊端\n<ul>\n<li>增加<code>Logging Admin</code>访问压力</li>\n</ul>\n</li>\n</ul>\n<h3>6.2 timing方式</h3>\n<p><code>timing</code>方式是定时上报，<code>ApiBoot Logging</code>通过配置参数<code>api.boot.logging.report-away=timing</code>启用，默认<strong>间隔5秒</strong>执行一次上报，每次上报<strong>10条</strong>请求日志。</p>\n<h4>6.2.1 修改上报间隔时间</h4>\n<p><code>ApiBoot Logging</code>默认间隔<code>5秒</code>发起一次上报请求到<code>Logging Admin</code>，修改配置如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    logging:</span>\n      <span class=\"hljs-comment\"># 修改每间隔10秒执行一次上报日志</span>\n<span class=\"hljs-attr\">      report-interval-second:</span> <span class=\"hljs-number\">10</span>\n</code></pre>\n<h4>6.2.2 修改每次上报条数</h4>\n<p><code>ApiBoot Logging</code>默认每次发送缓存内的<code>10条</code>日志到<code>Logging Admin</code>，修改配置如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    logging:</span>\n      <span class=\"hljs-comment\"># 修改每次上报2条请求日志</span>\n<span class=\"hljs-attr\">      number-of-request-log:</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<h2>7. 日志上报到指定Admin</h2>\n<p><code>ApiBoot Logging</code> 支持上报请求日志到指定<code>Admin</code>服务节点，配置如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    logging:</span>\n<span class=\"hljs-attr\">      admin:</span>\n        <span class=\"hljs-comment\"># Logging Admin 服务地址</span>\n<span class=\"hljs-attr\">        server-address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:9090</span>\n</code></pre>\n<blockquote>\n<p>注意：<code>Logging Admin</code>服务地址不需要配置<code>http://</code>路径前缀。</p>\n</blockquote>\n<h2>8. 日志上报到服务注册中心Admin</h2>\n<p><code>ApiBoot Logging</code>支持从<code>服务注册中心（Eureka Server、Nacos Discovery、Consul...）</code>中获取指定<code>serviceID</code>的服务列表，并且自动通过<code>LoadBalance</code>方式上报请求日志。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    logging:</span>\n<span class=\"hljs-attr\">      discovery:</span>\n        <span class=\"hljs-comment\"># Logging Admin ServiceID</span>\n<span class=\"hljs-attr\">        service-id:</span> <span class=\"hljs-string\">sample-logging-admin</span>\n</code></pre>\n<blockquote>\n<p><code>Logging Admin ServiceID</code>对应<code>Logging Admin</code>服务的<code>spring.application.name</code>属性配置。</p>\n</blockquote>\n<h2>9. 日志缓存</h2>\n<p><code>ApiBoot Logging</code>内部默认通过<code>memory（内存方式）</code>进行缓存请求日志，目前版本无法修改<code>缓存方式</code>。</p>\n<h2>10. 支持SpringSecurity安全上报日志</h2>\n<p><code>安全性</code>是日志上报的基础能力之一，<code>ApiBoot Logging</code>内部集成<code>Spring Security</code>的<code>Basic</code>安全认证方式来完成上报鉴权。</p>\n<h3>10.1 指定Admin的安全配置</h3>\n<p><code>ApiBoot Logging</code>指定<code>Admin</code>服务节点的方式跟<code>Eureka Client ServerUrl</code>类似，在路径上添加<code>Logging Admin</code>配置的<code>Spring Security</code>用户名密码，配置如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    logging:</span>\n<span class=\"hljs-attr\">      admin:</span>\n        <span class=\"hljs-comment\"># 用户名：user，密码：123456</span>\n<span class=\"hljs-attr\">        server-address:</span> <span class=\"hljs-attr\">user:123456@127.0.0.1:9090</span>\n</code></pre>\n<h3>10.2 服务注册中心Admin的安全配置</h3>\n<p><code>服务注册中心</code>方式配置<code>Logging Admin</code>的<code>Spring Security</code>用户名、密码方式如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    logging:</span>\n<span class=\"hljs-attr\">      discovery:</span>\n        <span class=\"hljs-comment\"># Logging Admin ServiceID</span>\n<span class=\"hljs-attr\">        service-id:</span> <span class=\"hljs-string\">sample-logging-admin</span>\n        <span class=\"hljs-comment\"># 用户名</span>\n<span class=\"hljs-attr\">        username:</span> <span class=\"hljs-string\">user</span>\n        <span class=\"hljs-comment\"># 密码</span>\n<span class=\"hljs-attr\">        password:</span> <span class=\"hljs-number\">123456</span>\n</code></pre>\n<h2>11. 日志通知</h2>\n<p><code>ApiBoot Logging</code>提供了日志的通知功能，利用该功能可以对每一条请求日志进行输出、存储、分析等，通过实现<code>LoggingNotice</code>接口使用通知功能，示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LocalNoticeSample</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">LoggingNotice</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * order 值越小执行越靠前\n     *\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 请求日志通知执行方法\n     * MinBoxLog为一次请求日志对象基本信息\n     *\n     * <span class=\"hljs-doctag\">@param</span> minBoxLog ApiBoot Log\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">notice</span><span class=\"hljs-params\">(MinBoxLog minBoxLog)</span> </span>{\n        System.out.println(minBoxLog);\n    }\n}\n</code></pre>\n<p><code>ApiBoot Logging</code>提供的<code>LoggingNotice</code>支持<strong>多个实现类配置</strong>，执行顺序根据<code>getOrder()</code>方法的返回值来定义，<code>getOrder()</code>方法返回<strong>值越小越靠前执行</strong>。\n<code>MinBoxLog</code>对象定义如下所示：</p>\n<pre><code class=\"language-java\">\n<span class=\"hljs-comment\">/**\n * ApiBoot Log Object\n *\n * <span class=\"hljs-doctag\">@author</span>：恒宇少年 - 于起宇\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MinBoxLog</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * trace id\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String traceId;\n    <span class=\"hljs-comment\">/**\n     * span id\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String spanId;\n    <span class=\"hljs-comment\">/**\n     * parent span id\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String parentSpanId;\n    <span class=\"hljs-comment\">/**\n     * request uri\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String requestUri;\n    <span class=\"hljs-comment\">/**\n     * request method\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String requestMethod;\n    <span class=\"hljs-comment\">/**\n     * http status code\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> httpStatus;\n    <span class=\"hljs-comment\">/**\n     * request ip\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String requestIp;\n    <span class=\"hljs-comment\">/**\n     * service ip address\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String serviceIp;\n    <span class=\"hljs-comment\">/**\n     * service port\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String servicePort;\n    <span class=\"hljs-comment\">/**\n     * start time\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Long startTime;\n    <span class=\"hljs-comment\">/**\n     * end time\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Long endTime;\n    <span class=\"hljs-comment\">/**\n     * this request time consuming\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> timeConsuming;\n    <span class=\"hljs-comment\">/**\n     * service id\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String serviceId;\n    <span class=\"hljs-comment\">/**\n     * request headers\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; requestHeaders;\n    <span class=\"hljs-comment\">/**\n     * request param\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String requestParam;\n    <span class=\"hljs-comment\">/**\n     * request body\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String requestBody;\n    <span class=\"hljs-comment\">/**\n     * response headers\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; responseHeaders;\n    <span class=\"hljs-comment\">/**\n     * response body\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String responseBody;\n    <span class=\"hljs-comment\">/**\n     * exception stack\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String exceptionStack;\n    <span class=\"hljs-comment\">/**\n     * Global method log list\n     */</span>\n    <span class=\"hljs-keyword\">private</span> List&lt;GlobalLog&gt; globalLogs;\n}\n</code></pre>\n<h2>12. 无缝支持Openfeign</h2>\n<p><code>ApiBoot Logging</code>支持<code>Spring Cloud Openfeign</code>的方式请求，在<code>SpringCloud</code>微服务应用中如果你发起一个<code>Http</code>请求，而该请求在服务端通过<code>openfeign</code>访问其他服务，这时<code>ApiBoot Logging</code>会通过<code>openfeign</code>的<code>Interceptor</code>携带<code>TraceId</code>、<code>SpanId</code>到下一个服务，完成请求日志的链路信息透传。</p>\n<h2>13. GlobalLogging</h2>\n<p><code>GlobalLogging</code>是全局日志，可以用来采集业务代码中的不同等级的日志，支持采集<code>异常堆栈</code>、<code>日志产生类</code>、<code>日志产生源码行</code>、<code>日志产生方法</code>等信息。</p>\n<p><code>ApiBoot Logging</code>提供了一个配置参数，用于修改<code>GlobalLogging</code>的临时存储方式，默认为<code>内存方式(memory)</code>，如下所示：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">api:</span>\n<span class=\"hljs-attr\">  boot:</span>\n<span class=\"hljs-attr\">    logging:</span>\n<span class=\"hljs-attr\">      global-logging-storage-away:</span> <span class=\"hljs-string\">memory</span>\n</code></pre>\n<blockquote>\n<p>该配置目前只提供了这一种存储方式，所以我们直接使用默认值即可，可以不用在<code>application.yml</code>文件内添加。</p>\n</blockquote>\n<h3>13.1 Debug等级日志</h3>\n<p>在<code>GlobalLogging</code>提供了两种<code>debug</code>方法，方法定义源码如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * Collect Debug Level Logs\n  *\n  * <span class=\"hljs-doctag\">@param</span> msg log content\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">debug</span><span class=\"hljs-params\">(String msg)</span></span>;\n\n<span class=\"hljs-comment\">/**\n  * Collect Debug Level Logs\n  *\n  * <span class=\"hljs-doctag\">@param</span> format    Unformatted log content\n  * <span class=\"hljs-doctag\">@param</span> arguments List of parameters corresponding to log content\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">debug</span><span class=\"hljs-params\">(String format, Object... arguments)</span></span>;\n</code></pre>\n<p>使用示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> GlobalLogging logging;\n\n<span class=\"hljs-comment\">// debug(String msg)</span>\nlogging.debug(<span class=\"hljs-string\">\"这是一个debug等级的日志\"</span>);\n\n<span class=\"hljs-comment\">// debug(String format,Object... arguments)</span>\nlogging.debug(<span class=\"hljs-string\">\"这是一个debug等级的日志，执行时间：{}\"</span> , System.currentTimeMillis());\n\n<span class=\"hljs-comment\">// debug(String format, Object... arguments)</span>\nlogging.debug(<span class=\"hljs-string\">\"多参数演示，第一个参数值：{}，第二个参数值：{}，第三个参数值：{}\"</span>,<span class=\"hljs-number\">16.7</span>,<span class=\"hljs-string\">\"b\"</span>,<span class=\"hljs-number\">10</span>);\n</code></pre>\n<blockquote>\n<p>由于<code>arguments</code>参数采用的可变长度参数传递，所以这里允许传递多个不同类型的填充<code>{}</code>占位符的内容。</p>\n</blockquote>\n<h3>13.2 Info等级日志</h3>\n<p>在<code>GlobalLogging</code>接口中同样为<code>info</code>级别的日志采集提供了两个方法，方法定义源码如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * Collect Info Level Logs\n  *\n  * <span class=\"hljs-doctag\">@param</span> msg log content\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">info</span><span class=\"hljs-params\">(String msg)</span></span>;\n\n<span class=\"hljs-comment\">/**\n  * Collect Info Level Logs\n  *\n  * <span class=\"hljs-doctag\">@param</span> format    Unformatted log content\n  * <span class=\"hljs-doctag\">@param</span> arguments List of parameters corresponding to log content\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">info</span><span class=\"hljs-params\">(String format, Object... arguments)</span></span>;\n</code></pre>\n<p>使用示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> GlobalLogging logging;\n\n<span class=\"hljs-comment\">// info(String msg)</span>\nlogging.info(<span class=\"hljs-string\">\"这是一个info等级的日志\"</span>);\n\n<span class=\"hljs-comment\">// info(String format, Object... arguments)</span>\nlogging.info(<span class=\"hljs-string\">\"这是一个info等级的日志，记录时间：{}\"</span> , System.currentTimeMillis());\n\n<span class=\"hljs-comment\">// info(String format, Object... arguments)</span>\nlogging.info(<span class=\"hljs-string\">\"多参数演示，第一个参数值：{}，第二个参数值：{}，第三个参数值：{}\"</span>,<span class=\"hljs-string\">\"a\"</span>,<span class=\"hljs-string\">\"b\"</span>,<span class=\"hljs-number\">10</span>);\n</code></pre>\n<blockquote>\n<p>由于<code>arguments</code>参数采用的可变长度参数传递，所以这里允许传递多个不同类型的填充<code>{}</code>占位符的内容。</p>\n</blockquote>\n<h3>13.3 Error等级日志</h3>\n<p>在<code>GlobalLogging</code>接口中为<code>error</code>等级的日志则是提供了<code>3</code>个方法，比<code>info/debug</code>多出了一个采集异常堆栈信息的方法，源码如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * Collect Error Level Logs\n  *\n  * <span class=\"hljs-doctag\">@param</span> msg log content\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">error</span><span class=\"hljs-params\">(String msg)</span></span>;\n\n<span class=\"hljs-comment\">/**\n  * Collect Error Level Logs\n  *\n  * <span class=\"hljs-doctag\">@param</span> msg       log content\n  * <span class=\"hljs-doctag\">@param</span> throwable Exception object instance\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">error</span><span class=\"hljs-params\">(String msg, Throwable throwable)</span></span>;\n\n<span class=\"hljs-comment\">/**\n  * Collect Error Level Logs\n  *\n  * <span class=\"hljs-doctag\">@param</span> format    Unformatted log content\n  * <span class=\"hljs-doctag\">@param</span> arguments List of parameters corresponding to log content\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">error</span><span class=\"hljs-params\">(String format, Object... arguments)</span></span>;\n</code></pre>\n<p>其中<code>error(String msg)</code>以及<code>error(String format, Object... arguments)</code>方法使用方式与<code>debug/info</code>一致。</p>\n<h3>13.4 异常堆栈信息</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n  * Collect Error Level Logs\n  *\n  * <span class=\"hljs-doctag\">@param</span> msg       log content\n  * <span class=\"hljs-doctag\">@param</span> throwable Exception object instance\n  */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">error</span><span class=\"hljs-params\">(String msg, Throwable throwable)</span></span>;\n</code></pre>\n<p>采集异常堆栈信息的<code>error</code>方法，需要我们把异常实例作为参数传递，在内部通过<code>printStackTrace()</code>方法进行转换堆栈信息。</p>\n<p>使用示例如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">5</span> / <span class=\"hljs-number\">0</span>;\n} <span class=\"hljs-keyword\">catch</span> (Exception e) {\n  logging.error(<span class=\"hljs-string\">\"出现了异常.\"</span>, e);\n}\n</code></pre>\n",
  "link": "/zh-cn/docs/api-boot-logging.html",
  "meta": {
    "title": "ApiBoot Logging 使用文档"
  }
}